(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{315:function(t,s,e){"use strict";e.r(s);var n=e(6),a=Object(n.a)({},(function(){var t=this.$createElement,s=this._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[s("h2",{attrs:{id:"大示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#大示例"}},[this._v("#")]),this._v(" 大示例")]),this._v(" "),s("div",{staticClass:"language-angular2html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("1.0 在Node中引入模块，需要经历如下3个步骤。\n\n路径分析\n文件定位\n编译执行\n在Node中，模块分为两类：一类是Node提供的模块，称为核心模块；另一类是用户编写的模块，称为文件模块。\n2.1　优先从缓存加载\n与前端浏览器会缓存静态脚本文件以提高性能一样，Node对引入过的模块都会进行缓存，以减少二次引入时的开销。不同的地方在于，浏览器仅仅缓存文件，而Node缓存的是编译和执行之后的对象。\n核心模块的缓存检查先于文件模块的缓存检查\n")])])])])}),[],!1,null,null,null);s.default=a.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{251:function(e,n,t){"use strict";t.r(n);var a=t(6),o=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"_3-0-模块导入导出大全"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-0-模块导入导出大全"}},[e._v("#")]),e._v(" 3.0 模块导入导出大全")]),e._v(" "),t("h2",{attrs:{id:"介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[e._v("#")]),e._v(" 介绍")]),e._v(" "),t("blockquote",[t("p",[e._v("module.exports 和exports 是commonjs的规范 --模块的导出 "),t("br"),e._v("\nrequire 是amd规范 --模块的导入\nexport 和export default 是es6 规范 --模块的导出 "),t("br"),e._v("\nimport 是es6 的一个语法标准 --模块的导入")])]),e._v(" "),t("p",[e._v("require: node 和 es6 都支持的引入 "),t("br"),e._v("\nexport / import : 只有es6 支持的导出引入"),t("br"),e._v("\nmodule.exports / exports: 只有 node 支持的导出"),t("br")]),e._v(" "),t("h2",{attrs:{id:"_1-0-module-exports-和-exports的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-0-module-exports-和-exports的使用"}},[e._v("#")]),e._v(" 1.0 module.exports 和 exports的使用")]),e._v(" "),t("blockquote",[t("p",[e._v("module 变量代表当前模块，这是个对象，会创建exports的属性，属性的默认值是空对象")])]),e._v(" "),t("p",[e._v("我们新建两个文件")]),e._v(" "),t("div",{staticClass:"language-angular2html extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//until.js\nmodule.exports = {a:1,b:2}\n// main.js\nlet req = require('./until.js')\nconsole.log(req) // 结果 {a:1,b:2}\n")])])]),t("p",[e._v("继续修改until.js")]),e._v(" "),t("div",{staticClass:"language-angular2html extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("module.exports = {a:1,b:2}\nmodule.exports = function (name){\nconsole.log('名字是'+name)\n}\n// main.js\nlet req = require('./until.js')\nconsole.log(req,req('小红')) // 结果 名字是小红\n")])])]),t("p",[e._v("总结：一个js文件里面只有一个 module.exports，如果重复会被覆盖")]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("我们继续修改until.js")]),e._v(" "),t("div",{staticClass:"language-angular2html extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function add(a,b){\nconsole.log(a+b)\n}\nlet a = 1;\nmodule.exports = {add,a}\n\n// main.js\nlet req = require('./until.js')\nconsole.log(req,req('小红'))   // 结果 { add: [Function: add], a: 1 }\n\n当然了 main.js 也可以这样 解构用\nlet {add,a} = require('./until.js')\nconsole.log(add(1,2),a) // 结果  3  1\n")])])]),t("blockquote",[t("p",[e._v("exports 是module.exports的一个引用，可以认为是 var exports = module.exports = {}")])]),e._v(" "),t("div",{staticClass:"language-angular2html extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// until.js\nfunction add(a,b){\nconsole.log(a+b)\n}\nexports.a = 1;\nexports.add = add;\nexports.isPeople = true;\n\n// main.js\nlet msg = require('./until.js')\nconsole.log(msg) // 结果 { a: 1, add: [Function: add], isPeople: true }\n\n")])])]),t("p",[e._v("继续修改")]),e._v(" "),t("div",{staticClass:"language-angular2html extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let a = 100;\n\nconsole.log(module.exports); //能打印出结果为：{}\nconsole.log(exports); //能打印出结果为：{}\n\nexports.a = 200; // module.exports 的内容给改成 {a : 200}\n\nexports = '指向其他内存区'; //这里把exports的指向指走\n\nmain.js\nvar a = require('./until.js');\nconsole.log(a) // 结果 {a : 200}\n")])])]),t("div",{staticClass:"language-angular2html extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("module.exports = {name: '叔叔'};\nexports = {name: '阿姨'}\n\n//main.js\nvar obj = require('./until.js');\nconsole.log(obj) // 结果 { name: '叔叔' }\n")])])]),t("h2",{attrs:{id:"_2-0-module-exports-和exports的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-0-module-exports-和exports的区别"}},[e._v("#")]),e._v(" 2.0 module.exports 和exports的区别")]),e._v(" "),t("p",[e._v("1.0 相对而已，exports不能导出匿名函数（比如没有变量名的函数）也不能写 exports = {add};"),t("br"),e._v("\n2.0 其实require导出的内容是module.exports的指向的内存块内容，并不是exports的。\n简而言之，区分他们之间的区别就是 exports 只是 module.exports的引用，辅助后者添加内容用的")]),e._v(" "),t("h2",{attrs:{id:"_3-0-export和export-default-的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-0-export和export-default-的使用"}},[e._v("#")]),e._v(" 3.0 export和export default 的使用")]),e._v(" "),t("blockquote",[t("p",[e._v("export 用于对外输出本模块（一个文件可以理解为一个模块）变量的接口，import 用于在一个模块中加载另一个含有export接口的模块。也就是说使用export命令定义了模块的对外接口以后，其他JS文件就可以通过import命令加载这个模块（文件）。这几个都是ES6的语法。")])]),e._v(" "),t("p",[e._v("demo1 export 导出的例子")]),e._v(" "),t("div",{staticClass:"language-angular2html extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// until.js\n\n    let age = 11;\n    let name = \"小红\";\n    function add(){\n        console.log('123321')\n    }\n    \n    export {age}\n    export {name}\n    export {add}\n\n// main.js\n     //导入方法 对应导入的变量或函数，一定要花括号\n    import {age,name,add} from './until.js'  // 花括号里面的值必须与暴露的变量相同\n    \n    console.log(age,name,add()) // 结果 11 小红 123321\n\n// until.js 导出部分也可以这样写\n    export {age,name,add}\n\n    还可以这样写\n    export let old = 'uuww'\n\n// 注意当我们导出一个函数的时候\n    export function add(){  // 正确的\n        console.log(123)\n    }\n\n    export function(){  // 错误的\n        console.log(123)\n    }\n\n\n")])])]),t("p",[e._v("demo2 export default导出的例子")]),e._v(" "),t("div",{staticClass:"language-angular2html extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// until.js\n    let age = 11;\n    let name = \"小红\";\n    \n    export default age\n    export default name \n    // 注意这时候就会报错，因为一个页面只能export default一个\n    所以我们修改成\n    export default {age,name}\n\n//main.js 引入的时候也是有所区别的\n    import {age,name} from './until.js'\n    \n    console.log(age,name) // 结果 11 小红\n    \n    也可以这样写\n    import {age as age1,name as name1} from './until.js' // 取了一个别名\n    \n    console.log(age1,name1) // 结果 11 小红\n    \n    还可以这样\n    import test from './until.js' // 当一个整体的时候名字随便取，不要花括号\n\n    console.log(test.age,test.name) // 结果 11 小红\n\n    或者这样\n    import * as test from './until.js' \n    \n    console.log(test.age,test.name) // 结果 11 小红\n    \n\n// 注意当我们导出一个函数的时候\n    export default function(){ // 正确\n        console.log(123)\n    }\n    export default function add(){ // 正确\n        console.log(123)\n    }\n    \n    import add from './until.js'\n")])])]),t("p",[e._v("总结："),t("br"),e._v("\n1.0 在一个文件或模块中，export、import可以有多个，export default仅有一个 "),t("br"),e._v("\n2.0 export default 的对象、变量、函数、类、 可以没有名字，但export导出的必须有名字 "),t("br"),e._v("\n3.0 通过export方式导出，在导入时要加{ }(如果用 import * as ... from 也可以不用 {})，export default则不需要\n4.0 export default与export可以在同一个js文件中同时使用\n5.0 模块的导入导出意义在于将类聚的方法和变量等限定在私有的作用域中，同时支持引入和导出功能以顺畅地连接上下游依赖，使得用户完全不必考虑变量污染。")])])}),[],!1,null,null,null);n.default=o.exports}}]);
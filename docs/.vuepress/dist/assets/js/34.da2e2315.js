(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{244:function(n,a,t){"use strict";t.r(a);var o=t(6),s=Object(o.a)({},(function(){var n=this,a=n.$createElement,t=n._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"_4-0-作用域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-0-作用域"}},[n._v("#")]),n._v(" 4.0 作用域")]),n._v(" "),t("blockquote",[t("p",[n._v("作用域指一个变量的作用的范围 。"),t("br"),n._v("\n作用域最大的用处就是"),t("strong",[n._v("隔离变量")]),n._v("，不同作用域下同名变量不会有冲突")])]),n._v(" "),t("p",[n._v("通常来说，一段程序代码中所用到的名字并不总是有效和可用\n的，而限定这个名字的可用性的代码范围就是这个名字的作用域。作用域的使用提高了程序逻辑\n的局部性，增强了程序的可靠性，减少了名字冲突。\n"),t("br"),n._v("\n在 JavaScript 中有3种作用域类型：")]),n._v(" "),t("p",[n._v("1.0 全局作用域 "),t("br"),n._v("\n2.0 函数作用域 （局部作用域）\n3.0 es6块级作用域")]),n._v(" "),t("h4",{attrs:{id:"_1-0-全局作用域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-0-全局作用域"}},[n._v("#")]),n._v(" 1.0 全局作用域")]),n._v(" "),t("blockquote",[t("p",[n._v("直接写在 script 标签中的 JavaScript 代码都是全局作用域。当页面打开运行时全局作用域就会自\n动创建，而当页面关闭时就会销毁。在全局作用域中有一个全局的 window 对象可以使用，而所\n有全局作用域对象都会作为 window 对象的属性来使用。")])]),n._v(" "),t("p",[n._v("栗子：")]),n._v(" "),t("div",{staticClass:"language-angular2html extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("<script>\n        console.log(window);\n        var a = 10;\n        console.log(window.a); // 10\n \n        function aa() {\n            console.log('aa')\n        }\n        window.aa(); // aa\n \n        var aaa = {\n            name: '张三'\n        }\n        console.log(window.aaa.name); //张三\n    <\/script>\n")])])]),t("p",[t("strong",[n._v("注意：")]),n._v(" 如果这个对象 / 属性 / 方法是 window 的，那么在使用这些对象 / 属性 / 方法时，可以省略 window 的编写。")]),n._v(" "),t("h4",{attrs:{id:"_2-0-函数作用域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-0-函数作用域"}},[n._v("#")]),n._v(" 2.0 函数作用域")]),n._v(" "),t("blockquote",[t("p",[n._v("作用于函数内的代码环境，就是局部作用域。由于跟函数有关，所以也称为函数作用域。")])]),n._v(" "),t("p",[n._v("2.1 局部作用域（函数作用域）是在调用函数时才会被创建，函数执行完毕后就自动销毁。同时，每\n调用一次函数就会创建一个新的函数作用域，它们之间是相互独立的。\n"),t("br")]),n._v(" "),t("p",[n._v("2.2在函数作用域中可以访问全局作用域，而在全局作用域中不能访问函数作用域。\n"),t("br")]),n._v(" "),t("p",[n._v("2.3 当在函数作用域 中使用一个变量时，它会先在自身作用域内查找，如果找到就直接使用，如果没有找到则会向上\n一级作用域查找，直到找到全局作用域为止。如果都没有找到则会报错。\n"),t("br")]),n._v(" "),t("p",[n._v("栗子：")]),n._v(" "),t("div",{staticClass:"language-angular2html extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("<script>\n        var age = 18;\n \n        function fn() {\n            var age = 20;\n            console.log(age); // 20\n            console.log(this.age); // 18  \n            //console.log(this);\n            console.log(window.age); // 18\n        }\n        window.fn();\n    <\/script>\n")])])]),t("p",[t("strong",[n._v("注意：")]),n._v(" 上面普通函数里面的 this指向的是window")]),n._v(" "),t("h4",{attrs:{id:"_3-0-自动全局作用域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-0-自动全局作用域"}},[n._v("#")]),n._v(" 3.0 自动全局作用域")]),n._v(" "),t("blockquote",[t("p",[n._v("如果您为尚未声明的变量赋值，此变量会自动成为全局变量。")])]),n._v(" "),t("div",{staticClass:"language-angular2html extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    name = 50\n    function fn() {\n        age = 19;\n        console.log(age); // 19\n    }\n    fn();\n    console.log(window.age); // 19\n    console.log(age); // 19\n    console.log(name); // 50\n")])])]),t("p",[t("strong",[n._v("注意：")]),n._v(" 如果在函数中定义变量时没有指定 var 关键字，那么这个变量会自动提升为全局作用域的变量。")]),n._v(" "),t("p",[t("strong",[n._v("作用域链")])]),n._v(" "),t("p",[n._v("当查找变量的时候，会先从当前执行上下文的变量对象中查找，如果没有找到，就会从父级(词法层面上的父级)执行上下文的变量对象中查找，一直找到全局上下文的变量对象，也就是全局对象。这样由多个执行上下文的变量对象构成的链表就叫做作用域链")]),n._v(" "),t("p",[n._v("成功只有一个 —— 按照自己的方式，去度过人生。--《明朝那些事儿》")])])}),[],!1,null,null,null);a.default=s.exports}}]);
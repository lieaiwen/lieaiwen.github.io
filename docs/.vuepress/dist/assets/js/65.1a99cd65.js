(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{251:function(n,a,t){"use strict";t.r(a);var e=t(6),s=Object(e.a)({},(function(){var n=this,a=n.$createElement,t=n._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"_1-0-小程序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-0-小程序"}},[n._v("#")]),n._v(" 1.0 小程序")]),n._v(" "),t("ul",[t("li",[n._v("轻量级，用完即走")]),n._v(" "),t("li",[n._v("mpvue wepg 小程序的框架")])]),n._v(" "),t("h2",{attrs:{id:"_2-0-变量提升（预处理）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-0-变量提升（预处理）"}},[n._v("#")]),n._v(" 2.0 变量提升（预处理）")]),n._v(" "),t("blockquote",[t("p",[n._v("js引擎在代码正式执行之前会做一个预处理的工作")])]),n._v(" "),t("ol",[t("li",[n._v("收集变量")]),n._v(" "),t("li",[n._v("收集函数")])]),n._v(" "),t("p",[n._v("将var后面的变量定义但不赋值 比如 var a = undefined;"),t("br"),n._v("\nfunction(){} 提前定义该函数"),t("br"),n._v(" "),t("strong",[n._v("js引擎底层如何实现变量提升")]),t("br"),n._v("\n执行上下文，，执行上下文对象"),t("br")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("执行上下文（execute context）EC\n理解：代码执行的环境\n时机：代码在正式执行之前会进入到执行环境\n进入执行环境要干那些工作\n    1. 创建变量对象，主要收集变量 函数及函数的参数\n                    全局变量 window 局部的：抽象的但是确实存在\n    2.0 确认this的指向\n        1）全局的this指向谁\n        2）局部 this---\x3e调用它的对象\n    3.0 创建作用域链\n        父级作用域链 + 当前的变量对象\n     4.0 扩展\n        ECObj = {\n            变量对象：{变量，函数，函数的形参}\n            scopeChain（作用域链）：父级作用域链 + 当前的变量对象\n            this：{window || 调用它的对象}\n        }\n执行上下文对象就是指 this\n\n作用域是代码定义的时候产生的\n")])])]),t("h2",{attrs:{id:"_3-0-隐式类型转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-0-隐式类型转换"}},[n._v("#")]),n._v(" 3.0  隐式类型转换")]),n._v(" "),t("p",[t("strong",[n._v("3.1 ==")])]),n._v(" "),t("ul",[t("li",[n._v("两个引用类型比较，只需判断它们是不是引用了同一个对象，是返回true，否则为false。")]),n._v(" "),t("li",[n._v("undefined 和 null 两者互相比较或者与自身比较，结果是true。它俩与其他任何值比较的都为false。")]),n._v(" "),t("li",[n._v("NaN与任何值比较包括它自身结果都是false。")]),n._v(" "),t("li",[n._v("引用类型和基本数据类型进行比较，两者最后都会转换成基本数据类型再进行比较。")]),n._v(" "),t("li",[n._v("String，Boolean，Number中的任意两个进行比较，最后都会转为Number类型再进行比较。")])]),n._v(" "),t("p",[t("strong",[n._v("3.2 +")]),t("br")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v(' 3 + true; // 4\n "2" + 3; // "23"\n 2 + "3"; // "23"\n')])])]),t("p",[t("strong",[n._v("3.3 if")]),t("br"),n._v(" "),t("strong",[n._v("3.4 || &&")]),t("br")]),n._v(" "),t("h2",{attrs:{id:"_4-0-let-var-const-区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-0-let-var-const-区别"}},[n._v("#")]),n._v(" 4.0 let var const 区别")]),n._v(" "),t("ol",[t("li",[n._v("let所声明的变量只在let命令所在的代码块内有效")]),n._v(" "),t("li",[n._v("let 不存在变量提升，不能重复定义")]),n._v(" "),t("li",[n._v("const 只读的对于 简单的数据类型，引用类型的话还是可以修改的")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const a = {name:1};\na.name = 2\na // {name:2} \n")])])]),t("p",[t("strong",[n._v("经典面试题")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v(" var arr = [];\n for (var i = 0; i < 3; i++) {\n     arr[i] = function () {\n         console.log(i);\n     };\n }\n arr[0](); // 3\n因为i 是全局变量 然而 arr 里面存的都是 function(){ console.log(i) } // 所以打印的都是3\n\n怎么解决呢？\nfor (var i = 0; i < 3; i++) {\n    arr[i] = (function(i){\n        return function() {\n            console.log(i);\n        }\n    }(i))\n}\narr[0](); // 0\n\n用es6的方法解决\nfor (let i = 0; i < 3; i++) {\n    arr[i] = function () {\n        console.log(i);\n    };\n}\narr[0](); // 0\n")])])]),t("h2",{attrs:{id:"_5-0-new的过程中发生了四步操作："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-0-new的过程中发生了四步操作："}},[n._v("#")]),n._v(" 5.0 new的过程中发生了四步操作：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var obj = new Object()\nobj.__propo__ = Foo.propotype;\nvar result = Foo.apply(obj, arguments)\nobj = (result instanceof Object && result) || obj; \n")])])]),t("h2",{attrs:{id:"_6-0-js乱序的实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-0-js乱序的实现"}},[n._v("#")]),n._v(" 6.0 js乱序的实现")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var values = [1, 2, 3, 4, 5];\n\nvalues.sort(function(){\n    return Math.random() - 0.5;\n});\n\nconsole.log(values)\n")])])]),t("p",[n._v("Math.random() - 0.5 随机得到一个正数，负数或者是0，\n如果是正数的则降序排列，如果是负数则升序排列，\n如果是0就不变，然后不断的升序或者降序，最终得到一个乱序的数组。")])])}),[],!1,null,null,null);a.default=s.exports}}]);
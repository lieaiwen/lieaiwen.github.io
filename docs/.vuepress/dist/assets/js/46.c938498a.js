(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{261:function(t,n,a){"use strict";a.r(n);var s=a(6),e=Object(s.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"真正的移动端适配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#真正的移动端适配"}},[t._v("#")]),t._v(" 真正的移动端适配")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.jianshu.com/p/1f1b23f8348f",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考链接"),a("OutboundLink")],1),a("br")]),t._v(" "),a("p",[t._v("我们再写移动端适配的时候，会在入口页面增加这一行代码")]),t._v(" "),a("div",{staticClass:"language-angular2html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<meta content="width=device-width, viewport-fit=cover, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no" name="viewport">\nwidth=device-width : 表示让当前的可视宽度 = 设备宽度\nviewport-fit=cover ：表示让当前的可视区域沾满整个屏幕(解决iphonex刘海全面屏底部留白问题)\ninitial-scale=1.0 :  设置页面的初始缩放值\nmaximum-scale=1.0 :  允许用户的最小缩放值\nminimum-scale=1.0 :  允许用户的最大缩放值\nuser-scalable=no :   是否允许用户进行缩放，值为"no"或"yes", no 代表不允许，yes代表允许\n')])])]),a("p",[t._v("meta标签中的viewport属性，就是视图的含义")]),t._v(" "),a("h4",{attrs:{id:"布局视口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布局视口"}},[t._v("#")]),t._v(" 布局视口")]),t._v(" "),a("p",[t._v("也就是"),a("code",[t._v('<meta name="viewport" content="width=device-width">')]),t._v("中width属性的含义"),a("br")]),t._v(" "),a("p",[t._v("我们在css中写的所有样式，就是相对于布局视口进行布局的"),a("br")]),t._v(" "),a("p",[t._v("默认情况下，移动端的布局视口并不是屏幕宽度，而是一般在768px ~ 1024px间(大部分情况下980px) "),a("br")]),t._v(" "),a("p",[t._v("可以通过document.documentElement.clientWidth 和 document.documentElement.clientHeight获取")]),t._v(" "),a("h4",{attrs:{id:"布局视口-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布局视口-2"}},[t._v("#")]),t._v(" 布局视口")]),t._v(" "),a("p",[t._v("视觉视口是指用户通过设备屏幕看到的区域，默认等于当前浏览器的窗口大小(当initial-scale为1)"),a("br")]),t._v(" "),a("p",[t._v("当用户对浏览器进行缩放时，不会改变布局视口的大小，所以页面布局是不变的，但是缩放会改变觉视口的大小"),a("br")]),t._v(" "),a("p",[t._v("可以通过window.innerWidth 和window.innerHeight获取 (会随着缩放进行改变)"),a("br")]),t._v(" "),a("p",[t._v("放大页面，此时window.innerWidth反而减小 (页面放大，你看到的东西也变少了)")]),t._v(" "),a("h4",{attrs:{id:"理想视口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#理想视口"}},[t._v("#")]),t._v(" 理想视口")]),t._v(" "),a("p",[t._v("理想视口的概念常用于移动端，使用户不需要缩放，也不需要出现横向滚动条，便可以正常看到网站的所有内容。"),a("br")]),t._v(" "),a("p",[t._v("理想视口下，布局视口宽度 = 视觉视口宽度 = 设备宽度 "),a("br")]),t._v(" "),a("p",[t._v("可以通过screen.width 和screen.height获取 (常量，不会改变)")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("设备像素也叫物理像素 "),a("br")]),t._v(" "),a("p",[t._v("设备像素指的是显示器上的真实像素，每个像素的大小是屏幕固有的属性，屏幕出厂以后就不会改变了。"),a("br")]),t._v(" "),a("p",[t._v("设备分辨率描述的就是这个显示器的宽和高分别是多少个设备像素。"),a("br")]),t._v(" "),a("p",[t._v("早期的移动设备，只有物理像素，没有独立像素，在不缩放的前提下，CSS 中的 1px 就代表着 1 个物理像素。比如 iphone3 的物理像素是 320 * 480，那么 width: 320px; 的元素将会占满 iphone3 的屏幕宽度。\n"),a("br")])]),t._v(" "),a("li",[a("p",[t._v("设备独立像素")]),t._v(" "),a("p",[t._v("从 iphone4 开始，苹果公司便推出了所谓的 Retina 屏，物理像素变成 640 * 960，但是屏幕尺寸没有变化，也就是说单位面积上的物理像素的数量增加了，或者说屏幕密度增加了。如果还按照原来那样，1px CSS 像素由 1 个物理像素来渲染， 那么 width: 320px; 的元素只会占据半个屏幕的宽度。原来在 iphone3 上能够占满屏的网页，在 iphone4 上只会占一半的屏幕，同时 font-size: 20px; 的字体在 iphone4 上的尺寸也会缩小。\n"),a("br"),t._v("\n为了让同一个网页在 iphone4 和 iphone3 上的有相同的显示效果，引入了独立像素的概念。iphone4 的独立像素为 320 * 480，是 iphone4 的物理像素的一半，和 iphone3 的物理像素一样。也就是说，iphone4 上的 1 个独立像素 == 2 个物理像素。在 iphone4 上，在不缩放的前提下，CSS 中的 1px 便由 1 个独立像素来渲染，相当于 2 个物理像素。这样，width: 320px; 的元素由 320 个独立像素来渲染，也就是由 640 个物理像素来渲染，正好占满 iphopn4 的屏幕宽度。font-size: 20px; 的字体在 iphone3 和 iphone4 上的尺寸也相同，只不过在 iphone4 上的字体更清楚。\n"),a("br"),t._v("\n我们已经知道，iphone4 上，1 个独立像素 == 2 个物理像素，但是不是所有的设备上都这样。\n并且在缩放比为1时，独立像素 === css像素\n"),a("br")])]),t._v(" "),a("li",[a("p",[t._v("css像素")]),t._v(" "),a("p",[t._v("在CSS中使用的px都是指css像素，比如width: 128px。css像素的大小是很容易变化的。当我们缩放页面的时候，元素的css像素数量不会改变，改变的只是每个css像素的大小。也就是说width: 128px的元素在缩放200%以后，宽度依然是128个css像素，只不过每个css像素的宽度和高度变为原来的两倍。如果原本元素宽度为128个设备独立像素，那么缩放200%以后元素宽度为256个设备独立像素（css像素宽度始终是128）\n"),a("br"),t._v("\n在缩放比例为100%的情况下，一个css像素大小等于一个设备独立像素。")]),t._v(" "),a("p",[t._v("为了描述不同型号的手机物理像素和独立像素之间的关系，引入了一个新的概念：设备像素比 devicePixelRatio（dpr）。在 js 中通过 window.devicePixelRatio 查看。")])])]),t._v(" "),a("div",{staticClass:"language-angular2html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("devicePixelRatio = 物理像素 / 独立像素\niphone3: devicePixelRatio = 320 / 320 = 1\niphone4: devicePixelRatio = 640 / 320 = 2\niphone6Plus: devicePixelRatio = 1242 / 414 = 3\n")])])]),a("p",[t._v("在 media 查询中，resolution 就代表着 devicePixelRatio。")]),t._v(" "),a("div",{staticClass:"language-angular2html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("@media (min-resolution: 2dppx) {\n  body {\n    color: red;\n  }\n}\n// 上面的代码表示，在 devicePixelRatio >= 2 的设备上，字体颜色为红色。\n")])])]),a("h2",{attrs:{id:"_1-0-1px像素问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-0-1px像素问题"}},[t._v("#")]),t._v(" 1.0 1px像素问题")]),t._v(" "),a("p",[t._v("这里的1像素指的是CSS像素。因此我们可以发现，在写1px的时候，在不同dpr的物理设备上映射的设备像素是不同的。dpr为2时，映射的像素为2px；dpr3时就映射成3px。这样的话，如果在屏幕尺寸比较大的设备上（准确来说时设备像素比较大），1px渲染出来就样子就会有些粗。")]),t._v(" "),a("h4",{attrs:{id:"解决方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决方案"}},[t._v("#")]),t._v(" 解决方案")]),t._v(" "),a("p",[t._v("利用媒体查询 + css3的transform "),a("br"),t._v("\n利用媒体查询区分二倍屏和三倍屏，利用transform:scale(xx)对高度进行缩放。代码如下：")]),t._v(" "),a("div",{staticClass:"language-angular2html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("/*二倍屏*/\n@media only screen and (-webkit-min-device-pixel-ratio: 2.0) {\n    .my-border::after {\n        transform: scaleY(0.5);\n        webkit-transform: scaleY(0.5);\n    }\n}\n/*三倍屏*/\n@media only screen and (-webkit-min-device-pixel-ratio: 3.0) {\n    .my-border::after {\n        transform: scaleY(0.33);\n        webkit-transform: scaleY(0.33);\n    }\n}\n")])])]),a("p",[t._v("注意：IOS 系统的 safari 浏览器不支持标准的 min-resolution，使用非标准的 min-device-pixel-ratio。")]),t._v(" "),a("h2",{attrs:{id:"_2-0-常见适配方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-0-常见适配方案"}},[t._v("#")]),t._v(" 2.0 常见适配方案")]),t._v(" "),a("h4",{attrs:{id:"移动端为什么会有适配的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#移动端为什么会有适配的问题"}},[t._v("#")]),t._v(" 移动端为什么会有适配的问题")]),t._v(" "),a("p",[t._v("不同型号的手机可能它的宽度、高度是不相同的，我们总不能都把宽度写成 750px吧")]),t._v(" "),a("blockquote",[a("p",[t._v("简单一句话概括：移动端适配就是在进行屏幕宽度的等比例缩放："),a("br"),t._v("\n平时我们开发中，拿到的移动端设计稿一般是750 * 1334 尺寸大小（ iPhone6 的设备像素为标准的设计图）。那如果在750px设计稿上量出的元素宽度为100px，那么在375px宽度的屏幕下，这个元素宽度就应该等比例缩放成50px。"),a("br"),t._v("\n所以适配的难点是：如果实现页面的等比例缩放？")])]),t._v(" "),a("h3",{attrs:{id:"rem方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rem方案"}},[t._v("#")]),t._v(" rem方案")]),t._v(" "),a("blockquote",[a("p",[t._v("该方案的核心就是：所有需要动态布局的元素，不再使用px固定尺寸，而是采用rem相对尺寸 "),a("br"),t._v("\nrem的大小是相对于根元素html的字体大小：如果html的font-size为100px，那么1rem就等于100px")])]),t._v(" "),a("p",[t._v("核心代码：")]),t._v(" "),a("div",{staticClass:"language-angular2html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" <script type=\"text/javascript\">\n    window.getPushWindowTimes = new Date().getTime();\n    (function (doc, win) {\n      var docEl = doc.documentElement,\n        resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize',\n        recalc = function () {\n          var clientWidth = docEl.clientWidth;\n          docEl.style.fontSize = 100 * (clientWidth / 750) + 'px';\n        };\n      if (!doc.addEventListener) {\n        return;\n      }\n      win.addEventListener(resizeEvt, recalc, false);\n      doc.addEventListener('DOMContentLoaded', recalc, false);\n      recalc()\n    })(document, window)\n  <\/script>\n")])])]),a("h3",{attrs:{id:"vh-vw方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vh-vw方案"}},[t._v("#")]),t._v(" vh/vw方案")]),t._v(" "),a("p",[t._v("vh、vw方案即将视觉视口宽度 window.innerWidth 和视觉视口高度 window.innerHeight 等分为 100 份。"),a("br")]),t._v(" "),a("p",[t._v("这种方案和上面的方案解决问题的思路一样。这个是需要将设计稿的px转成对应的vw，当然这种比例关系我们不用手动计算，webpack解析css时有个postcss-px-to-viewport插件，可以实现px到vw的自动转化。\n"),a("br"),t._v("\n核心代码：")]),t._v(" "),a("div",{staticClass:"language-angular2html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// 根目录新建 postcss.config.js\n    module.exports = {\n        plugins: {\n        \'postcss-px-to-viewport\': {\n        unitToConvert: "px", // 要转化的单位\n        viewportWidth: 750, // UI设计稿的宽度\n        unitPrecision: 6, // 转换后的精度，即小数点位数\n        propList: ["*"], // 指定转换的css属性的单位，*代表全部css属性的单位都进行转换\n        viewportUnit: "vw", // 指定需要转换成的视窗单位，默认vw\n        fontViewportUnit: "vw", // 指定字体需要转换成的视窗单位，默认vw      selectorBlackList: ["wrap"], // 指定不转换为视窗单位的类名，\n        minPixelValue: 1, // 默认值1，小于或等于1px则不进行转换\n        mediaQuery: true, // 是否在媒体查询的css代码中也进行转换，默认false\n        replace: true, // 是否转换后直接更换属性值\n        exclude: [/node_modules/], // 设置忽略文件，用正则做目录名匹配\n        include: undefined, // 如果设置了include，那将只有匹配到的文件才会被转换\n        landscape: false, // 是否添加根据 landscapeWidth 生成的媒体查询条件 @media (orientation: landscape)\n        landscapeUnit: \'vw\', // 横屏时使用的单位\n        // landscapeWidth: 750 // 横屏时使用的视口宽度\n        }\n    }\n')])])]),a("p",[t._v("我用的是vue单页面应用 下载对应的包即可")]),t._v(" "),a("h2",{attrs:{id:"检测属性的兼容情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检测属性的兼容情况"}},[t._v("#")]),t._v(" 检测属性的兼容情况")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://caniuse.com/?search=transfer",target:"_blank",rel:"noopener noreferrer"}},[t._v("网址"),a("OutboundLink")],1),t._v(" https://caniuse.com/?search=transfer")]),t._v(" "),a("h2",{attrs:{id:"_1-0-css3-含-的都有"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-0-css3-含-的都有"}},[t._v("#")]),t._v(" 1.0 css3 含@的都有")]),t._v(" "),a("p",[t._v("1.1 @media "),a("br"),t._v("\n使用 @media 查询，你可以针对不同的媒体类型定义不同的样式。"),a("br")]),t._v(" "),a("p",[t._v("@media 可以针对不同的屏幕尺寸设置不同的样式，特别是如果你需要设置设计响应式的页面，@media 是非常有用的。"),a("br")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token atrule"}},[a("span",{pre:!0,attrs:{class:"token rule"}},[t._v("@media")]),t._v(" only screen and "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("max-width")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 600px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".example")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("background")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" red"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        //screen\t用于电脑屏幕，平板电脑，智能手机等。\n")])])]),a("p",[t._v("当你重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面。"),a("br"),t._v(" "),a("a",{attrs:{href:"http://www.zliel.top/vpdemo/css-demo/css-media.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("demo"),a("OutboundLink")],1),t._v(" "),a("br"),t._v("\n1.2 @keyframes "),a("br"),t._v("\n使用@keyframes规则，你可以创建动画。"),a("br"),t._v("\n创建动画是通过逐步改变从一个CSS样式设定到另一个。"),a("br"),t._v("\n在动画过程中，您可以更改CSS样式的设定多次。"),a("br"),t._v('\n指定的变化时发生时使用％，或关键字"from"和"to"，这是和0％到100％相同。'),a("br"),t._v("\n0％是开头动画，100％是当动画完成。"),a("br"),t._v("\n为了获得最佳的浏览器支持，您应该始终定义为0％和100％的选择器"),a("br")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token property"}},[t._v("animation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("mymove 5s infinite"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token atrule"}},[a("span",{pre:!0,attrs:{class:"token rule"}},[t._v("@keyframes")]),t._v(" mymove")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token selector"}},[t._v("0%")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("top")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("0px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token selector"}},[t._v("25%")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("top")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("200px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token selector"}},[t._v("50%")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("top")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("100px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token selector"}},[t._v("75%")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("top")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("200px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token selector"}},[t._v("100%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("top")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("0px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language-说明 extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('animation: name duration timing-function delay iteration-count direction fill-mode play-state;\nanimation-name\t指定要绑定到选择器的关键帧的名称\nanimation-duration\t动画指定需要多少秒或毫秒完成\n  animation-timing-function\t设置动画将如何完成一个周期\n    animation-timing-function使用的数学函数，称为三次贝塞尔曲线，速度曲线。使用此函数，您可以使用您自己的值，或使用预先定义的值之一\n        1.0 linear\t动画从头到尾的速度是相同的。\n        2.0 ease\t默认。动画以低速开始，然后加快，在结束前变慢。\n        3.0 ease-in\t动画以低速开始。\n        4.0 ease-out\t动画以低速结束。\n        5.0 ease-in-out\t动画以低速开始和结束。\n        6.0 cubic-bezier(n,n,n,n)\t在 cubic-bezier 函数中自己的值。可能的值是从 0 到 1 的数值。\nanimation-delay\t设置动画在启动前的延迟间隔。\nanimation-iteration-count\t定义动画的播放次数。 0 infinite 无限次数\n  animation-direction\t指定是否应该轮流反向播放动画。  //定义是否循环交替反向播放动画。\n    1.0 normal\t默认值。动画按正常播放。\n    2.0 reverse\t动画反向播放。\n    3.0 alternate\t动画在奇数次（1、3、5...）正向播放，在偶数次（2、4、6...）反向播放。\n    4.0 alternate-reverse\t动画在奇数次（1、3、5...）反向播放，在偶数次（2、4、6...）正向播放。\n  animation-fill-mode\t规定当动画不播放时（当动画完成时，或当动画有一个延迟未开始播放时），要应用到元素的样式。\n    1.0 none\t默认值。动画在动画执行之前和之后不会应用任何样式到目标元素。\n    2.0 forwards\t在动画结束后（由 animation-iteration-count 决定），动画将应用该属性值。\n    3.0backwards\t动画将应用在 animation-delay 定义期间启动动画的第一次迭代的关键帧中定义的属性值。这些都是 from 关键帧中的值（当 animation-direction 为 "normal" 或 "alternate" 时）或 to 关键帧中的值（当 animation-direction 为 "reverse" 或 "alternate-reverse" 时）。\n    4.0 both\t动画遵循 forwards 和 backwards 的规则。也就是说，动画会在两个方向上扩展动画属性。\n  animation-play-state\t指定动画是否正在运行或已暂停。\n    1.0 paused\t指定暂停动画\t测试\n    2.0 running\t指定正在运行的动画\n    用法： animation-play-state: paused|running;\n')])])]),a("p",[a("a",{attrs:{href:"http://www.zliel.top/vpdemo/css-demo/css-keyframes.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("demo"),a("OutboundLink")],1),t._v(" "),a("br"),t._v("\n1.3 @font-size "),a("br"),t._v("\nInternet Explorer 9, Firefox, Opera,Chrome, 和 Safari支持@font-face 规则 "),a("br")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token atrule"}},[a("span",{pre:!0,attrs:{class:"token rule"}},[t._v("@font-face")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("font-family")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" myFirstFont"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("src")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token url"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("url")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("'Sansation_Light.ttf'"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token url"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("url")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("'Sansation_Light.eot'"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* IE9 */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token selector"}},[t._v("div")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("font-family")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("myFirstFont"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("a",{attrs:{href:"http://www.zliel.top/vpdemo/css-demo/css-font-face.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("demo"),a("OutboundLink")],1),t._v(" "),a("br")]),t._v(" "),a("h2",{attrs:{id:"_2-0-transition"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-0-transition"}},[t._v("#")]),t._v(" 2.0 transition")]),t._v(" "),a("p",[t._v("transition 属性设置元素当过渡效果 "),a("br"),t._v("\n语法：transition: property duration timing-function delay;")]),t._v(" "),a("div",{staticClass:"language-说明 extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("transition-property\t指定CSS属性的name，transition效果\n  1.0 none\t没有属性会获得过渡效果。\n  2.0 all\t所有属性都将获得过渡效果。\n  3.0 property\t定义应用过渡效果的 CSS 属性名称列表，列表以逗号分隔。\n  用法：单个-- transition-property:width;\n       多个-- transition-property:width,height;\ntransition-duration\ttransition效果需要指定多少秒或毫秒才能完成\ntransition-timing-function\t指定transition效果的转速曲线\n  1.0 linear\t规定以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)）。\n  2.0 ease\t规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）。\n  3.0 ease-in\t规定以慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)）。\n  4.0 ease-out\t规定以慢速结束的过渡效果（等于 cubic-bezier(0,0,0.58,1)）。\n  5.0 ease-in-out\t规定以慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)）。\ntransition-delay\t定义transition效果开始的时候\n  transition-delay 属性指定何时将开始切换效果。延迟几秒开始\n")])])]),a("p",[a("a",{attrs:{href:"http://www.zliel.top/vpdemo/css-demo/css-transition.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("demo"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_3-0-transform"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-0-transform"}},[t._v("#")]),t._v(" 3.0 transform")]),t._v(" "),a("p",[t._v("属性定义及使用说明 ---Transform属性应用于元素的2D或3D转换。这个属性允许你将元素旋转，缩放，移动，倾斜等。"),a("br"),t._v("\n主要属性有：")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("translate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t定义 2D 转换。 translate翻译："),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("使"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("变为，成为 等同于移动\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("translate3d")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t定义 3D 转换。\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("scale")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x["),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("y]?"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t定义 2D 缩放转换。\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("scale3d")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t定义 3D 缩放转换。\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rotate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("angle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t定义 2D 旋转，在参数中规定角度。\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rotate3d")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("angle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t定义 3D 旋转。\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("skewX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("angle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t定义沿着 X 轴的 2D 倾斜转换。\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("skewY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("angle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t定义沿着 Y 轴的 2D 倾斜转换。\n")])])]),a("p",[a("a",{attrs:{href:"http://www.zliel.top/vpdemo/css-demo/css-transform.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("demo"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_4-0-transition-和transform-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-0-transition-和transform-的区别"}},[t._v("#")]),t._v(" 4.0 transition 和transform 的区别")]),t._v(" "),a("p",[t._v("transition 是过度效果\ntransform 只是 2d或者3d转换， 在换句话说 人家 transition 是动画。")]),t._v(" "),a("h2",{attrs:{id:"_5-0-transition-和-animation-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-0-transition-和-animation-的区别"}},[t._v("#")]),t._v(" 5.0 transition 和 animation 的区别")]),t._v(" "),a("p",[t._v("transition 过渡效果 一定时间之内，一组css属性变换到另一组属性的动画展示过程。")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("需要一个事件来触发，比如hover，所以没法在网页加载时自动触发。 "),a("br")])]),t._v(" "),a("li",[a("p",[t._v("是一次性的，不能重复发生，除非一再触发。"),a("br")])]),t._v(" "),a("li",[a("p",[t._v("只能定义开始状态和结束状态，不能定义中间状态，也就是说只有两个状态。"),a("br")]),a("hr"),t._v("\nanimation  与transition不同的是，animation可以通过keyframes显式控制当前帧的属性值，"),a("br"),t._v("\n而transition只能隐式来进行（不能指定每帧的属性值）(属于帧动画)，所以相对而言animation的功能更加灵活。 "),a("br"),a("p")])]),t._v(" "),a("p",[t._v("扩展：什么是帧动画--逐帧动画是一种常见的动画形式（Frame By Frame），其原理是在“连续的关键帧”中分解动画动作，也就是在时间轴的每帧上逐帧绘制不同的内容，使其连续播放而成动画。")]),t._v(" "),a("h2",{attrs:{id:"_6-0-css预处理器（less-sass）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-0-css预处理器（less-sass）"}},[t._v("#")]),t._v(" 6.0 css预处理器（less/sass）")]),t._v(" "),a("p",[t._v("sass 和 LESS 都是是 CSS 预处理器，是 CSS 上的一种抽象层，是一种特殊的 语法/语言 最终会编译成 CSS,在这层编译之上，便可以赋予 CSS 更多更强大的功能，常用功能: "),a("br"),t._v("\n优点：结构清晰，便于扩展。可以轻松实现多重继承。"),a("br"),t._v("\n1.0 嵌套")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".one")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("color")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" red"),a("span",{pre:!0,attrs:{class:"token selector"}},[t._v(";\n    .two")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("color")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("blue\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token selector"}},[t._v("编译后： .one")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("color")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("red"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".one .two")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("color")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("blue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("后面的编译结果不写了\n")])])]),a("p",[t._v("2.0 变量")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$width: 5em;\n#main {\n  width: $width;\n}\n")])])]),a("p",[t._v("3.0 循环语句 4.0 条件语句  这两个我是不常用 建议也少用 "),a("br"),t._v("\n5.0 单位转换\n很早记得用给那个px2rem的转换 "),a("br"),t._v("\n6.0 mixin复用")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("@mixin no-bullets {\n  list-style: none;\n  li {\n    list-style-image: none;\n    list-style-type: none;\n    margin-left: 0px;\n  }\n}\nul.plain {\n  color: #444;\n  @include no-bullets;\n}\n")])])]),a("h2",{attrs:{id:"_7-0-常用的css3属性都有哪些？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-0-常用的css3属性都有哪些？"}},[t._v("#")]),t._v(" 7.0 常用的css3属性都有哪些？")]),t._v(" "),a("ol",[a("li",[t._v("border-radius")]),t._v(" "),a("li",[t._v("box-shadow")]),t._v(" "),a("li",[t._v("background-image\nbackground-size\nbackground-origin\nbackground-clip")]),t._v(" "),a("li",[t._v("Gradients")])]),t._v(" "),a("ul",[a("li",[t._v("线性渐变（Linear Gradients）- 向下/向上/向左/向右/对角方向")]),t._v(" "),a("li",[t._v("径向渐变（Radial Gradients）- 由它们的中心定义\nbackground-image: linear-gradient(direction, color-stop1, color-stop2, ...);")])]),t._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[t._v("transform 转换")]),t._v(" "),a("li",[t._v("transition 过度")]),t._v(" "),a("li",[t._v("@keyframes animation 动画")])])])}),[],!1,null,null,null);n.default=e.exports}}]);
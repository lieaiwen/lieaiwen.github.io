(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{63:function(t,a,r){"use strict";r.r(a);var n=r(0),s=Object(n.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"string-对象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#string-对象"}},[t._v("#")]),t._v(" String 对象")]),t._v(" "),r("p",[t._v("String 对象用于处理已有的字符块。"),r("br")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('    var txt="Hello World!";\n\n1.0 字符串（String）使用长度属性length来计算字符串的长度：\n    txt.length\n\n2.0 使用位置（索引）可以访问字符串中任何的字符：\n    var character=txt[4]; // 下标从0 开始\n\n3.0 在字符串中查找字符串\n字符串使用 indexOf() 来定位字符串中某一个指定的字符首次出现的位置：\n    var str="Hello world, welcome to the universe.";\n    var n=str.indexOf("welcome"); // 13 不存在的话是 -1\n\n4.0 内容匹配\nmatch()函数用来查找字符串中特定的字符，并且如果找到的话返回数组 没找到返回null\n    var str="Hello world!";\n    str.match("world") // ["world", index: 6, input: "Hello world!", groups: undefined]\n    str.match("worldd") // null\n\n5.0 替换内容\nreplace() 方法在字符串中用某些字符替换另一些字符。\n    str="Please visit Microsoft!"\n    var n=str.replace("Microsoft","Runoob"); // 不变的\n\n6.0 字符串大小写转换\n字符串大小写转换使用函数 toUpperCase() / toLowerCase():\n    var txt="Hello World!";       // String\n    var txt1=txt.toUpperCase();   // txt1 文本会转换为大写\n    var txt2=txt.toLowerCase();   // txt2 文本会转换为小写\n\n7.0 字符串转为数组\n字符串使用split()函数转为数组:\n    txt="a,b,c,d,e"   // String\n    txt.split(",");   // 使用逗号分隔 ["a", "b", "c", "d", "e"]\n    txt.split(" ");   // 使用空格分隔 ["a,b,c,d,e"]\n    txt.split("|");   // 使用竖线分隔  ["a,b,c,d,e"]\n\n8.0 特殊字符\n    Javascript 中可以使用反斜线（\\）插入特殊符号，如：撇号,引号等其他特殊符号。\n主要有： \\\'\t单引号\n        \\"\t双引号\n        \\\\\t斜杆\n        \\n\t换行\n        \\r\t回车\n        \\t\ttab\n        \\b\t空格\n        \\f\t换页\n')])])]),r("h2",{attrs:{id:"string-对象属性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#string-对象属性"}},[t._v("#")]),t._v(" String 对象属性")]),t._v(" "),r("p",[t._v("constructor\t对创建该对象的函数的引用 "),r("br"),t._v("\nlength\t字符串的长度 "),r("br"),t._v("\nprototype\t允许您向对象添加属性和方法 "),r("br")]),t._v(" "),r("h2",{attrs:{id:"string-对象方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#string-对象方法"}},[t._v("#")]),t._v(" String 对象方法")]),t._v(" "),r("p",[t._v("1.0 charAt()\t返回在指定位置的字符。")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('第一个字符位置为 0, 第二个字符位置为 1,以此类推.\nvar str = "HELLO WORLD";\nvar n = str.charAt(2) // L\n')])])]),r("p",[t._v("2.0 charCodeAt()\t返回在指定的位置的字符的 Unicode 编码。")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('var str = "HELLO WORLD";\nvar n = str.charCodeAt(0); // 72\n')])])]),r("p",[t._v("3.0 concat()\t连接两个或更多字符串，并返回新的字符串。")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('var str1 = "Hello ";\nvar str2 = "world!";\nvar n = str1.concat(str2); // Hello world!\n\nvar str1="Hello ";\nvar str2="world!";\nvar str3=" Have a nice day!";\nvar n = str1.concat(str2,str3); // Hello world! Have a nice day!\n')])])]),r("p",[t._v("4.0 fromCharCode()\t将 Unicode 编码转为字符。")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("var n = String.fromCharCode(65); // A\nvar n = String.fromCharCode(72,69,76,76,79); // HELLO\n")])])]),r("p",[t._v("5.0 indexOf()\t返回某个指定的字符串值在字符串中首次出现的位置。")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('如果没有找到匹配的字符串则返回 -1。\n注意： indexOf() 方法区分大小写。\n\n在字符串查找字符 "e" 第一次出现的位置:\nvar str="Hello world, welcome to the universe.";\nvar n=str.indexOf("e"); // 1\n\n在字符串第五个位置开始查找字符 "e" 第一次出现的位置:\nvar str="Hello world, welcome to the universe.";\nvar n=str.indexOf("e",5);\nn 输出结果:14\n')])])]),r("p",[t._v("6.0 lastIndexOf()\t从后向前搜索字符串，并从起始位置（0）开始计算返回字符串最后出现的位置。")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('语法: string.lastIndexOf(searchvalue,start)\n开始检索的位置在字符串的 start 处或字符串的结尾（没有指定 start 时）。\n如果没有找到匹配字符串则返回 -1 。\n注意：lastIndexOf() 方法是区分大小写的！\n从第 20 个字符开始查找字符串 "runoob" 最后出现的位置,：\nvar str="I am from runoob，welcome to runoob site.";\nvar n=str.lastIndexOf("runoob", 20); // 10\n')])])]),r("p",[t._v("7.0 includes()\t查找字符串中是否包含指定的子字符串。")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('includes() 方法用于判断字符串是否包含指定的子字符串。\n如果找到匹配的字符串则返回 true，否则返回 false。\n注意： includes() 方法区分大小写。\nvar str = "Hello world, welcome to the Runoob。";\nvar n = str.includes("world"); // true\n')])])]),r("p",[t._v("8.0 match()\t查找找到一个或多个正则表达式的匹配。")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('match() 方法将检索字符串 String Object，以找到一个或多个与 regexp 匹配的文本。\n这个方法的行为在很大程度上有赖于 regexp 是否具有标志 g。\n如果 regexp 没有标志 g，那么 match() 方法就只能在 stringObject 中执行一次匹配。\n如果没有找到任何匹配的文本， match() 将返回 null。\n否则，它将返回一个数组，其中存放了与它找到的匹配文本有关的信息。\n\n全局查找字符串 "ain"，且不区分大小写:\nvar str="The rain in SPAIN stays mainly in the plain"; \nvar n=str.match(/ain/gi); //["ain", "AIN", "ain", "ain"]\n\n判断是否微信浏览器:\nfunction is_weixn(){  \n    var ua = navigator.userAgent.toLowerCase();  \n    if(ua.match(/MicroMessenger/i)=="micromessenger") {  \n        return true;  \n    } else {  \n        return false;  \n    }  \n}\n')])])]),r("p",[t._v("9.0 repeat()\t复制字符串指定次数，并将它们连接在一起返回。")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('var str = "Runoob";\nstr.repeat(2); //RunoobRunoob\n')])])]),r("p",[t._v("10.0 replace()\t在字符串中查找匹配的子串， 并替换与正则表达式匹配的子串。")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('1.0 \nvar str="Visit Microsoft! Visit Microsoft!";\nvar n=str.replace("Microsoft","Runoob"); // Visit Runoob!Visit Microsoft!\n\n2.0 执行一个全局替换:\n    var str="Mr Blue has a blue house and a blue car";\n    var n=str.replace(/blue/g,"red");//Mr Blue has a red house and a red car\n')])])]),r("p",[t._v("11.0 search()\t查找与正则表达式相匹配的值。")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('search() 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。\n如果没有找到任何匹配的子串，则返回 -1。\nvar str="Visit Runoob!"; \nvar n=str.search("Runoob"); // 6\n\n执行一次忽略大小写的检索:\nvar str="Mr. Blue has a blue house";\ndocument.write(str.search(/blue/i)); // 4\n')])])]),r("p",[t._v("12.0 slice()\t提取字符串的片断，并在新的字符串中返回被提取的部分。")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('slice(start, end) 方法可提取字符串的某个部分，并以新的字符串返回被提取的部分。\n使用 start（包含） 和 end（不包含） 参数来指定字符串提取的部分。\n字符串中第一个字符位置为 0, 第二个字符位置为 1, 以此类推。\n提示： 如果是负数，则该参数规定的是从字符串的尾部开始算起的位置。也就是说，-1 指字符串的最后一个字符，-2 指倒数第二个字符，以此类推。\nstring.slice(start,end) // start必须 end 可选\n\nvar str="Hello world!";\n var n=str.slice(1,5); // ello\n')])])]),r("p",[t._v("13.0 split()\t把字符串分割为字符串数组。")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('split() 方法用于把一个字符串分割成字符串数组。\n提示： 如果把空字符串 ("") 用作 separator，那么 stringObject 中的每个字符之间都会被分割。\n注意： split() 方法不改变原始字符串。\n语法\nstring.split(separator,limit) // 返回值array\nseparator\t可选。字符串或正则表达式，从该参数指定的地方分割 string Object。\nlimit\t可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回\n1.0 省略分割参数：\nvar str="How are you doing today?";\nvar n=str.split(); // ["How are you doing today?"]\n\n2.0 分割每个字符，包括空格:\nvar str="How are you doing today?";\nvar n=str.split(""); // ["H", "o", "w", " ", "a", "r", "e", " ", "y", "o", "u", " ", "d", "o", "i", "n", "g", " ", "t", "o", "d", "a", "y", "?"]\n\n3.0 使用 limit 参数:\nvar str="How are you doing today?";\nvar n=str.split(" ",3);// ["How", "are", "you"]\n')])])]),r("p",[t._v("14.0 startsWith()\t查看字符串是否以指定的子字符串开头。")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('string.startsWith(searchvalue, start) start\t可选\n如果是以指定的子字符串开头返回 true，否则 false。\nstartsWith() 方法对大小写敏感。\nvar str = "Hello world, welcome to the Runoob.";\nvar n = str.startsWith("Hello"); // true\n')])])]),r("p",[t._v("15.0 substr()\t从起始索引号提取字符串中指定数目的字符。")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('string.substr(start,length) length\t可选。子串中的字符数。必须是数值。如果省略了该参数，那么返回从 stringObject 的开始位置到结尾的字串。\n\nvar str="Hello world!";\nvar n=str.substr(2) //llo world!\n\nvar str="Hello world!";\nvar n=str.substr(2,3) // llo\n')])])]),r("p",[t._v("16.0 substring()\t提取字符串中两个指定的索引号之间的字符。")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('substring() 方法用于提取字符串中介于两个指定下标之间的字符。\nsubstring() 方法返回的子串包括 开始 处的字符，但不包括 结束 处的字符。\nstring.substring(from, to) from\t必需。一个非负的整数 to\t可选。一个非负的整数\nvar str="Hello world!";\nstr.substring(3) // lo world!\nstr.substring(3,7) // lo w\n')])])]),r("p",[t._v("17.0 trim()\t去除字符串两边的空白")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('注意ie9以上才支持\ntrim() 方法用于删除字符串的头尾空格。\ntrim() 方法不会改变原始字符串。\n1.0 var str = "       Runoob        ";\n str.trim() // Runoob\n\n2.0 如果不支持的话\nfunction myTrim(x) {\n  return x.replace(/^\\s+|\\s+$/gm,\'\');\n}\n myTrim("        Runoob        ") // Runoob\n')])])]),r("p",[t._v("18.0 toLocaleLowerCase()\t根据本地主机的语言环境把字符串转换为小写。")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("本地是根据浏览器的语言设置来判断的。\n通常，该方法与 toLowerCase() 方法返回的结果相同，只有几种语言（如土耳其语）具有地方特有的大小写映射。\n")])])]),r("p",[t._v("19.0 toLocaleUpperCase()\t根据本地主机的语言环境把字符串转换为大写。")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("本地是根据浏览器的语言设置来判断的。\n通常，该方法与 toUpperCase() 方法返回的结果相同，只有几种语言（如土耳其语）具有地方特有的大小写映射。\n")])])]),r("p",[t._v("20.0 valueOf()\t返回某个字符串对象的原始值。")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('valueOf() 方法可返回 String 对象的原始值。\n\n注意： valueOf() 方法通常由 JavaScript 在后台自动进行调用，而不是显式地处于代码中。\nvar str="Hello world!";\nstr.valueOf() // Hello world!\n')])])]),r("p",[t._v("21.0 toString()\t返回一个字符串。")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('toString() 方法返回一个表示 String 对象的值。\nvar str = "Runoob";\nvar res = str.toString(); // Runoob\n')])])]),r("p",[t._v("22.0 toLowerCase()\t把字符串转换为小写。 "),r("br"),t._v("\ntoUpperCase()\t把字符串转换为大写。")]),t._v(" "),r("h2",{attrs:{id:"tostring-和valueof-的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tostring-和valueof-的区别"}},[t._v("#")]),t._v(" toString() 和valueOf() 的区别")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://www.jb51.net/article/74888.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("说明"),r("OutboundLink")],1),t._v(" "),r("br")])])}),[],!1,null,null,null);a.default=s.exports}}]);
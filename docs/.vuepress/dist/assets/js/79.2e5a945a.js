(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{294:function(t,a,s){"use strict";s.r(a);var e=s(6),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"_1-0-小程序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-0-小程序"}},[t._v("#")]),t._v(" 1.0 小程序")]),t._v(" "),s("ul",[s("li",[t._v("轻量级，用完即走")]),t._v(" "),s("li",[t._v("mpvue wepg 小程序的框架")])]),t._v(" "),s("h2",{attrs:{id:"_2-0-变量提升（预处理）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-0-变量提升（预处理）"}},[t._v("#")]),t._v(" 2.0 变量提升（预处理）")]),t._v(" "),s("blockquote",[s("p",[t._v("js引擎在代码正式执行之前会做一个预处理的工作")])]),t._v(" "),s("ol",[s("li",[t._v("收集变量")]),t._v(" "),s("li",[t._v("收集函数")])]),t._v(" "),s("p",[t._v("将var后面的变量定义但不赋值 比如 var a = undefined;"),s("br"),t._v("\nfunction(){} 提前定义该函数"),s("br"),t._v(" "),s("strong",[t._v("js引擎底层如何实现变量提升")]),s("br"),t._v("\n执行上下文，，执行上下文对象"),s("br")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("执行上下文（execute context）EC\n理解：代码执行的环境\n时机：代码在正式执行之前会进入到执行环境\n进入执行环境要干那些工作\n    1. 创建变量对象，主要收集变量 函数及函数的参数\n                    全局变量 window 局部的：抽象的但是确实存在\n    2.0 确认this的指向\n        1）全局的this指向谁\n        2）局部 this---\x3e调用它的对象\n    3.0 创建作用域链\n        父级作用域链 + 当前的变量对象\n     4.0 扩展\n        ECObj = {\n            变量对象：{变量，函数，函数的形参}\n            scopeChain（作用域链）：父级作用域链 + 当前的变量对象\n            this：{window || 调用它的对象}\n        }\n执行上下文对象就是指 this\n\n作用域是代码定义的时候产生的\n")])])]),s("h2",{attrs:{id:"_3-0-隐式类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-0-隐式类型转换"}},[t._v("#")]),t._v(" 3.0  隐式类型转换")]),t._v(" "),s("p",[s("strong",[t._v("3.1 ==")])]),t._v(" "),s("ul",[s("li",[t._v("两个引用类型比较，只需判断它们是不是引用了同一个对象，是返回true，否则为false。")]),t._v(" "),s("li",[t._v("undefined 和 null 两者互相比较或者与自身比较，结果是true。它俩与其他任何值比较的都为false。")]),t._v(" "),s("li",[t._v("NaN与任何值比较包括它自身结果都是false。")]),t._v(" "),s("li",[t._v("引用类型和基本数据类型进行比较，两者最后都会转换成基本数据类型再进行比较。")]),t._v(" "),s("li",[t._v("String，Boolean，Number中的任意两个进行比较，最后都会转为Number类型再进行比较。")])]),t._v(" "),s("p",[s("strong",[t._v("3.2 +")]),s("br")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(' 3 + true; // 4\n "2" + 3; // "23"\n 2 + "3"; // "23"\n')])])]),s("p",[s("strong",[t._v("3.3 if")]),s("br"),t._v(" "),s("strong",[t._v("3.4 || &&")]),s("br")]),t._v(" "),s("h2",{attrs:{id:"_5-0-new的过程中发生了四步操作："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-0-new的过程中发生了四步操作："}},[t._v("#")]),t._v(" 5.0 new的过程中发生了四步操作：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var obj = new Object()\nobj.__propo__ = Foo.propotype;\nvar result = Foo.apply(obj, arguments)\nobj = (result instanceof Object && result) || obj; \n")])])]),s("h2",{attrs:{id:"_6-0-js乱序的实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-0-js乱序的实现"}},[t._v("#")]),t._v(" 6.0 js乱序的实现")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var values = [1, 2, 3, 4, 5];\n\nvalues.sort(function(){\n    return Math.random() - 0.5;\n});\n\nconsole.log(values)\n")])])]),s("p",[t._v("Math.random() - 0.5 随机得到一个正数，负数或者是0，\n如果是正数的则降序排列，如果是负数则升序排列，\n如果是0就不变，然后不断的升序或者降序，最终得到一个乱序的数组。")])])}),[],!1,null,null,null);a.default=n.exports}}]);
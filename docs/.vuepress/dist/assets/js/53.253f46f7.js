(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{272:function(t,s,n){"use strict";n.r(s);var a=n(6),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"promise"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[t._v("#")]),t._v(" Promise")]),t._v(" "),n("p",[t._v("谁说我们程序员不懂浪漫，promise 就是我们的浪漫之一 "),n("br"),t._v("\npromise 承诺，许诺的意思，所以接下来我们就看看到底许诺了什么？")]),t._v(" "),n("p",[t._v("在 JavaScript 的世界中，所有代码都是单线程执行的。"),n("br"),t._v("\n由于这个“缺陷”，导致 JavaScript 的所有网络操作，浏览器事件，都必须是异步执行。异步执行可以用回调函数实现"),n("br"),t._v("\n下面四个概念注意区分：")]),t._v(" "),n("blockquote",[n("p",[t._v("异步执行：就是说我必须先干完事件 1，才能干事件 2，接着干事件 3"),n("br"),t._v("\n同步执行：1,2,3 这 3 件事，我同时干"),n("br"),t._v("\n异步接口:发起一个接口请求不需要等到响应结果就能发起下一个接口请求。"),n("br"),t._v("\n同步接口:发起一个接口请求必须要等到响应结果才能发起下一个接口请求。")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 当参数a>10的时候，调用fn2,小的时候调用fn3，调用fn2的时候再把参数传给他，当参数>16的\n时候调用fn4 其它情况调用fn5，\nfunction fn1(a){\n    if(a>10){\n        fn2(a)\n    }else{\n        fn3()\n    }\n};\nfunction fn2(b){\n    if(b>16){\n        fn4()\n    }else{\n        fn5()\n    }\n}\n")])])]),n("p",[t._v("一般来说我们会碰到的回调嵌套都不会很多，一般就一到两级，但是某些情况下，回调嵌套很多时，代码就会非常繁琐，会给我们的编程带来很多的麻烦，这种情况俗称——回调地狱。"),n("br")]),t._v(" "),n("p",[t._v("这时候我们的 promise 就应运而生、粉墨登场了."),n("br")]),t._v(" "),n("p",[t._v("promise 是用来解决两个问题的：")]),t._v(" "),n("blockquote",[n("p",[t._v("1.0 回调地狱，代码难以维护， 常常第一个的函数的输出是第二个函数的输入这种现象 "),n("br"),t._v("\n2.0 promise 可以支持多个并发的请求，获取并发请求中的数据")])]),t._v(" "),n("h2",{attrs:{id:"_1-0-promise-的状态"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-0-promise-的状态"}},[t._v("#")]),t._v(" 1.0 Promise 的状态")]),t._v(" "),n("blockquote",[n("p",[t._v("promise 有三种状态：pending(等待态)，fulfiled(成功态)，rejected(失败态)"),n("br"),t._v("\n两个过程: "),n("br"),t._v("\n1.0 pending -> fulfiled、状态的改变改变调用的是 resolve(data),其中的参数是 promise 成功状态时的结果，进入.then()"),n("br"),t._v("\n2.0 pending -> rejected 状态的改变调用的时 reject(error),参数是失败状态的结果,进入.catch()")])]),t._v(" "),n("p",[t._v("Promise 是一个构造函数，所有可以直接 new")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v(" let p = new Promise((resolve, reject) => {\n    //做一些异步操作\n    setTimeout(() => {\n        console.log('执行完成');\n        resolve('我是成功！！');\n    }, 2000);\n});\n    console.log('p',p) // p Promise{<pending>}\n    p.then(res=>{\n        console.log(res) // 我是成功\n    })\n")])])]),n("h2",{attrs:{id:"_2-0-then-链式操作的用法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-0-then-链式操作的用法"}},[t._v("#")]),t._v(" 2.0 then 链式操作的用法")]),t._v(" "),n("p",[t._v("从表面上看，Promise 只是能够简化层层回调的写法，而实质上，Promise 的精髓是“状态”，用维护状态、传递状态的方式来使得回调函数能够及时调用，它比传递 callback 函数要简单、灵活的多。所以使用 Promise 的正确场景是这样的：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("p.then((data) => {\n    console.log(data);\n})\n.then((data) => {\n    console.log(data);\n})\n.then((data) => {\n    console.log(data);\n});\n")])])]),n("h2",{attrs:{id:"_3-0-catch-用法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-0-catch-用法"}},[t._v("#")]),t._v(" 3.0 .catch 用法")]),t._v(" "),n("p",[t._v(".then 是接受成功的时候值的，如果失败了，那就走 catch，看下面")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("let p = new Promise((resolve, rejected) => {\n    setTimeout(function(){\n        var num = Math.ceil(Math.random()*10); //生成1-10的随机数\n        if(num<=5){\n            resolve(num);\n        }\n        else{\n          rejected(num);\n        }\n    }, 2000);\n});\n    p.then((data) => {\n         console.log('resolved',data);\n        }\n    ).catch(err=>{\n        console.log('rejected',err);\n    });\n")])])]),n("p",[t._v("所以说好用就是好用，肯定返回两个值，要么成功，要么失败，很方便我们接下来的操作。")]),t._v(" "),n("h2",{attrs:{id:"_4-0-promise-all-用法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-0-promise-all-用法"}},[t._v("#")]),t._v(" 4.0 Promise.all 用法")]),t._v(" "),n("p",[t._v("谁跑的慢，以谁为准执行回调(意思是都执行完了才有返回值)。all 接收一个数组参数，里面的值最终都算返回 Promise 对象")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v(" let Promise1 = new Promise(function(resolve, reject){\n                resolve({name:'小红'})\n    })\n    let Promise2 = new Promise(function(resolve, reject){\n        setTimeout(()=>{\n            resolve({name:'小明'})\n        },2000)\n    })\n    let Promise3 = new Promise(function(resolve, reject){\n        resolve({name:'小白'})\n    })\n\n    let p = Promise.all([Promise1, Promise2, Promise3])\n    console.log('p',p)\n    p.then((data) => {\n         console.log('resolved',data); // [{name:'小红'},{name:'小明'},{name:'小白'}]\n      }\n    ).catch(err=>{\n        console.log('rejected',err);\n    });\n")])])]),n("p",[t._v("注意：上面的返回值跟先执行完不执行完，没关系，一定是按 all 后面的顺序返回的。"),n("br"),t._v("\n有了 all，你就可以并行执行多个异步操作，并且在一个回调中处理所有的返回数据.所以有时候，我们跟后台，调接口的时候，需要从两个接口都拿到值\n才能进行下一步操作的时候，all 方法是再合适不过了。")]),t._v(" "),n("h2",{attrs:{id:"_5-0-promise-race-方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-0-promise-race-方法"}},[t._v("#")]),t._v(" 5.0 Promise.race()方法")]),t._v(" "),n("p",[t._v("谁跑的快，以谁为准执行回调(也就是说，谁先给结果我就用谁)。"),n("br"),t._v("\nrace 的使用场景：比如我们可以用 race 给某个异步请求设置超时时间，并且在超时后执行相应的操作")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("//请求某个图片资源\n    function requestImg(){\n        var p = new Promise((resolve, reject) => {\n            var img = new Image();\n            img.onload = function(){\n                resolve(img);\n            }\n            img.src = '图片的路径';\n        });\n        return p;\n    }\n    //延时函数，用于给请求计时\n    function timeout(){\n        var p = new Promise((resolve, reject) => {\n            setTimeout(() => {\n                reject('图片请求超时');\n            }, 5000);\n        });\n        return p;\n    }\n    Promise.race([requestImg(), timeout()]).then((data) =>{\n        console.log(data);\n    }).catch((err) => {\n        console.log(err);\n    });\n")])])]),n("p",[t._v('requestImg 函数会异步请求一张图片，我把地址写为"图片的路径"，所以肯定是无法成功请求到的。timeout 函数是一个延时 5 秒的异步操作。我们把这两个返回 Promise 对象的函数放进 race，于是他俩就会赛跑，如果 5 秒之内图片请求成功了，那么遍进入 then 方法，执行正常的流程。如果 5 秒钟图片还未成功返回，那么 timeout 就跑赢了，则进入 catch，报出“图片请求超时”的信息。')]),t._v(" "),n("h2",{attrs:{id:"_6-0-promise-的-finally-方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-0-promise-的-finally-方法"}},[t._v("#")]),t._v(" 6.0 Promise 的 finally()方法")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const p = function(){\n    let num = Math.random();\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            num > 0.5 ? resolve(num) : reject(num); // 大于0.5 成功，小于的话返回失败\n        }, 1000);\n    })\n};\n\npms().then(res=>{\n    console.log('成功的结果',res)\n}).catch(err=>{\n    console.log('失败的结果',err)\n}).finally(() => {\n    console.info('不管成功与失败，最后我都要执行干其它的事情');\n})\n")])])]),n("h2",{attrs:{id:"_7-0-promise-的模拟实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-0-promise-的模拟实现"}},[t._v("#")]),t._v(" 7.0 Promise 的模拟实现")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("myPromise")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("fun")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" that "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        that"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("status "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pending"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        that"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        that"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("reason "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("that"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("status "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pending"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                that"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                that"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("status "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"resolved"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("reject")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("reason")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("that"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("status "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pending"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                that"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("reason "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" reason"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                that"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("status "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"rejected"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//捕获构造异常")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("resolve"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("reject"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("reject")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    myPromise"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("then")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("onFullfilled"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("onRejected")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" self"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("status"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"resolved"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("onFullfilled")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"rejected"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("onRejected")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("reason"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" aa "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("myPromise")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("reject")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aa"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    aa"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("res")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n")])])]),n("p",[t._v("悲观的人，先被自己打败，然后才被生活打败；乐观的人，先战胜自己，然后才战胜生活。——汪国真")])])}),[],!1,null,null,null);s.default=e.exports}}]);
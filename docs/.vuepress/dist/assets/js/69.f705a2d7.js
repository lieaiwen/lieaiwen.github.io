(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{256:function(n,e,o){"use strict";o.r(e);var t=o(6),a=Object(t.a)({},(function(){var n=this,e=n.$createElement,o=n._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[o("h2",{attrs:{id:"js的继承"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#js的继承"}},[n._v("#")]),n._v(" js的继承")]),n._v(" "),o("p",[o("strong",[n._v("什么是继承:")])]),n._v(" "),o("blockquote",[o("p",[n._v("你的爸爸姓“张”（对应js的属性）,你爸爸会“开车”（js方法 canCar()）,你也姓“张”，\n你爸爸又教你开车了，为啥要你爸教你呢？（省钱啊）这就是继承（省事）。当然你也可以不姓“张”\n你就叫“狗蛋”，这就叫“重写”。当然了，本文主要介绍js里面的继承。")])]),n._v(" "),o("p",[n._v("总结：继承可以使得子类具有父类的各种方法和属性。以免重复输出很多代码。")]),n._v(" "),o("p",[o("strong",[n._v("1.0 原型链继承")])]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[n._v('     function Parent(){\n         this.name = "张"\n     }\n     Parent.prototype.getName = function(){\n         console.log(this.name)\n     }\n     function Son(){\n \n     }\n     Son.prototype = new Parent();\n     var son1 = new Son();\n     console.log(son1.getName()) // 张\n')])])]),o("p",[n._v("问题：")]),n._v(" "),o("ol",[o("li",[n._v("引用类型的属性被所有实例共享")])]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[n._v("     function Parent(){\n         this.name = [\"张\",'大']\n     }\n     Parent.prototype.getName = function(){\n         console.log(this.name)\n     }\n     function Son(){\n \n     }\n     Son.prototype = new Parent();\n     var son1 = new Son();\n     son1.name.push('狗蛋')\n     console.log(son1.name) // [\"张\",'大','狗蛋']\n     var son2 = new Son();\n     console.log(son2.name) // [\"张\",'大','狗蛋']\n")])])]),o("ol",{attrs:{start:"2"}},[o("li",[n._v("在创建 Child 的实例时，不能向Parent传参")])]),n._v(" "),o("p",[o("strong",[n._v("2.0 借用构造函数（call）")])]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[n._v(" function Parent(){\n         this.name = [\"张\",'大']\n     }\n     function Son(){\n         Parent.call(this)\n     }\n     var son1 = new Son();\n     son1.name.push('狗蛋')\n     console.log(son1.name) // [\"张\",'大','狗蛋']\n     var son2 = new Son();\n     console.log(son2.name) // [\"张\",'大']\n")])])]),o("p",[n._v("优点：")]),n._v(" "),o("ol",[o("li",[n._v("避免了引用类型的属性被所有实例共享")]),n._v(" "),o("li",[n._v("可以在 Child 中向 Parent 传参")])]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[n._v(" function Parent(name){\n         this.name = name\n     }\n     function Son(name){\n         Parent.call(this,name)\n     }\n     var son1 = new Son('狗蛋');\n     console.log(son1.name) // '狗蛋'\n     var son2 = new Son('张二');\n     console.log(son2.name) // 张二\n")])])]),o("p",[n._v("缺点：")]),n._v(" "),o("ul",[o("li",[n._v("方法都在构造函数中定义，每次创建实例都会创建一遍方法。")])]),n._v(" "),o("p",[o("strong",[n._v("3.0 组合继承")])]),n._v(" "),o("p",[n._v("就是原型链继承和构造函数的合并。")]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[n._v('     function Parent(name){\n         this.name = name;\n         this.colors = [\'red\', \'blue\', \'green\'];\n     }\n     Parent.prototype.getName = function () {\n         console.log(this.name)\n     }\n     function Son(name,age){\n         Parent.call(this,name)\n         this.age = age;\n     }\n     Son.prototype = new Parent();\n     Son.prototype.constructor = Son;\n     console.log(Son)\n     var son1 = new Son(\'狗蛋\',18);\n     son1.colors.push(\'black\');\n     console.log(son1.name); // 狗蛋\n     console.log(son1.age); // 18\n     console.log(son1.colors); // ["red", "blue", "green", "black"]\n \n     var son2 = new Son(\'张二\',18);\n     son2.colors.push(\'red\');\n     console.log(son2.name); // 张二\n     console.log(son2.age); // 18\n     console.log(son2.colors); // ["red", "blue", "green", "red"]\n')])])]),o("p",[n._v("优点：融合原型链继承和构造函数的优点，是 JavaScript 中最常用的继承模式。")]),n._v(" "),o("p",[o("strong",[n._v("4.0 原型式继承")])]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[n._v(" function createObj(o) {\n     function F(){}\n     F.prototype = o;\n     return new F();\n }\n")])])]),o("p",[n._v("就是 ES5 Object.create 的模拟实现，将传入的对象作为创建的对象的原型。\n"),o("br"),n._v("\n缺点："),o("br")]),n._v(" "),o("ul",[o("li",[n._v("包含引用类型的属性值始终都会共享相应的值，这点跟原型链继承一样")])]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[n._v(" var person = {\n        name:'小明',\n        friends:['小红','小刘']\n    }\n    var person1 = createObj(person)\n     var person2 = createObj(person)\n     person1.name = \"狗蛋\"\n     person1.friends.push('小小');\n     console.log(person2.name); // 小明 基本类型没共享\n     console.log(person2.friends); // ['小红','小刘','小小'] // 引用类型共享了\n")])])]),o("p",[o("strong",[n._v("5.0 寄生式继承")])]),n._v(" "),o("blockquote",[o("p",[n._v("创建一个仅用于封装继承过程的函数，该函数在内部以某种形式来做增强对象，最后返回对象")])]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[n._v(" function createObj (o) {\n         var clone = Object.create(o);\n         clone.sayName = function () {\n             console.log('hi');\n         }\n         return clone;\n     }\n    var person = {\n        name:'小明',\n        friends:['小红','小刘']\n    }\n    var person1 = createObj(person)\n     console.log(person1.name); // 小明\n     person1.sayName(); // hi\n")])])]),o("p",[n._v("代码中基于person 返回了一个新对象person1，新对象不仅有person的\n所有属性和方法，而且还有自己的sayHi()方法\n"),o("br"),n._v("\n缺点:跟借用构造函数模式一样，每次创建对象都会创建一遍方法。")]),n._v(" "),o("p",[o("strong",[n._v("6.0 寄生组合式继承")])]),n._v(" "),o("p",[n._v("再看一下组合继承")]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[n._v("  function Parent(name){\n          this.name = name;\n          this.colors = ['red', 'blue', 'green'];\n      }\n      Parent.prototype.getName = function () {\n          console.log(this.name)\n      }\n      function Son(name,age){\n          Parent.call(this,name) // // 第二次调用父构造函数\n          this.age = age;\n      }\n      Son.prototype = new Parent(); // 第一次调用父构造函数\n      Son.prototype.constructor = Son;\n      var son1 = new Son('狗蛋',18);\n      console.log(son1.name); // 狗蛋\n")])])]),o("p",[n._v("组合继承最大的缺点是会调用两次父构造函数。\n"),o("br")]),n._v(" "),o("p",[n._v("打印Son.prototype 和 son1 都有一个属性为colors，属性值为['red', 'blue', 'green']。\n"),o("br")]),n._v(" "),o("p",[n._v("我们能不能避免这一次调用呢？"),o("br"),n._v("\n如果我们不使用 Son.prototype = new Parent() ，而是间接的让 Son.prototype 访问到 Parent.prototype 呢？")]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[n._v(' function Parent(name){\n         this.name = name;\n         this.colors = [\'red\', \'blue\', \'green\'];\n     }\n     Parent.prototype.getName = function () {\n         console.log(this.name)\n     }\n     function Son(name,age){\n         Parent.call(this,name) // // 第二次调用父构造函数\n         this.age = age;\n     }\n     var F = function(){}\n     F.prototype = Parent.prototype;\n     Son.prototype = new F(); // 第一次调用父构造函数\n     var son1 = new Son(\'狗蛋\',18);\n     console.log(son1); // {name: "狗蛋",colors:  ["red", "blue", "green"] ,age: "18"}\n')])])]),o("p",[n._v("最后封装一下:")]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[n._v(" function object(o) {\n     function F() {}\n     F.prototype = o;\n     return new F();\n }\n \n function prototype(child, parent) {\n     var prototype = object(parent.prototype);\n     prototype.constructor = child;\n     child.prototype = prototype;\n }\n \n // 当我们使用的时候：\n prototype(Child, Parent);\n")])])]),o("p",[n._v("这种方式的高效率体现它只调用了一次 Parent 构造函数，并且因此避免了在 Parent.prototype 上面创建不必要的、多余的属性。与此同时，原型链还能保持不变；因此，还能够正常使用 instanceof 和 isPrototypeOf。开发人员普遍认为寄生组合式继承是引用类型最理想的继承范式。")])])}),[],!1,null,null,null);e.default=a.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{244:function(a,r,e){"use strict";e.r(r);var t=e(6),n=Object(t.a)({},(function(){var a=this,r=a.$createElement,e=a._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"数组操作（精简版）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组操作（精简版）"}},[a._v("#")]),a._v(" 数组操作（精简版）")]),a._v(" "),e("blockquote",[e("p",[a._v("日常开发中，数组对于我们来说是经常使用到的，由此这里给大家分享几十个关于Array实用的代码，\n内容很多，建议收藏阅读")])]),a._v(" "),e("p",[a._v("本篇文章不在一一解释，每个操作的具体用法，我们只介绍一下主要(实用)用法，让我们开始吧")]),a._v(" "),e("h2",{attrs:{id:"_1-0-push"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-0-push"}},[a._v("#")]),a._v(" 1.0 push")]),a._v(" "),e("p",[a._v("push 方法从数组尾部开始添加数据,原数组发生改变")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let a = [1,2,3]\na.push(4,5,6) // a = [1,2,3,4,5,6]  \n \nlet a = [1,2,3]\nlet b = a.push([1,2]) // a = [1,2,3,[1,2]] \n\nlet a = [1,2,3]\na.push() // a = [1,2,3] \n")])])]),e("h2",{attrs:{id:"_2-0-unshift"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-0-unshift"}},[a._v("#")]),a._v(" 2.0 unshift")]),a._v(" "),e("p",[a._v("unshift 方法从数组头部开始添加数据,原数组发生改变")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let a = [1,2,3]\na.unshift(4,5,6) // a = [4,5,6,1,2,3]\n\nlet a = [1,2,3]\na.unshift([1,2]) // a = [[1,2],1,2,3] \n\nlet a = [1,2,3]\na.unshift() // a = [1,2,3] \n")])])]),e("h2",{attrs:{id:"_3-0-pop"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-0-pop"}},[a._v("#")]),a._v(" 3.0 pop")]),a._v(" "),e("p",[a._v("pop 方法来删除并返回数组的最后一个元素,原数组发生改变")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let a = [1,2,3]\nlet b = a.pop() // a = [1,2]   b = 2\n")])])]),e("h2",{attrs:{id:"_4-0-shift"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-0-shift"}},[a._v("#")]),a._v(" 4.0 shift")]),a._v(" "),e("p",[a._v("shift 方法来删除并返回数组的第一个元素,原数组发生改变")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let a = [1,2,3]\nlet b = a.shift() // a = [2,3]   b = 1\n")])])]),e("h2",{attrs:{id:"_5-0-slice"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-0-slice"}},[a._v("#")]),a._v(" 5.0 slice")]),a._v(" "),e("p",[a._v("slice 切割数组arr.slice(start, end)：start和end是数组下标从0开始（允许负值）,返回切割后的数组,"),e("em",[a._v("原数组不改变")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let a = [1,2,3]\nlet b = a.slice() // a = [1,2,3]   b = [1,2,3]\n\nlet a = [1,2,3]\nlet b = a.slice(1) // a = [1,2,3] b  = [2,3]\n\nlet a = [1,2,3]\nlet b = a.slice(1,2) // a = [1,2,3] b  = [2]\n\n5.1 超过下标到最后一个结束\nlet a = [1,2,3]\nlet b = a.slice(1,5) // a = [1,2,3] b  = [2,3]\n\n5.2 第一个参数为负数 倒着查即可\nlet a = [1,2,3,4]\nlet b = a.slice(-2) // a = [1,2,3,4] b  = [3,4]  \n\n5.3 多个负数\nlet a = [1,2,3,4]\nlet b = a.slice(-2,2) // a = [1,2,3,4] b  = [] 负数 -2 从 3 开始，2 也是3 并且不能包括它 所以为[]\nlet c = a.slice(-2,3) // a = [1,2,3,4]  c = [3]\nlet d = a.slice(-3,-1) // a = [1,2,3,4]  c = [2,3]\nlet e = a.slice(-1,-4) // 这种乱的情况 返回 [] \n\n")])])]),e("p",[a._v("重点：传两个值则从 第一个参数下标开始到 第二个参数下标 之前结束,不包括第二个参数下标的值")]),a._v(" "),e("h2",{attrs:{id:"_6-0-splice"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-0-splice"}},[a._v("#")]),a._v(" 6.0 splice")]),a._v(" "),e("p",[a._v("splice 方法也是修改数组的,99%原数组改变")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("6.1 没有参数的话返回空数组，原数组不变\nlet a = [1,2,3]\nlet b = a.splice() // a = [1,2,3]   b = []\n\n6.2 一个参数 ，表示从 该参数索引开始截取，到数组结束，原数组是剩下的\nlet a = [1,2,3]\nlet b = a.splice(1) // a = [1]   b = [2,3]\n// 也可是负数\nlet b = a.splice(-1) // a = [1,2]   b = [3]\n\n6.3 两个参数 ， 从第一个参数索引开始到，第二个参数表示的是长度意思是1 就截取一个 2 就截取2个\nlet a = [1,2,3]\nlet b = a.splice(0,1) // a = [2,3]   b = [1]\nlet b = a.splice(1,2) // a = [1]   b = [2,3]\n\n6.4 三个参数以上的， 同上 ，后面的参数 就是往数组里面追加的，往原数组截取的位置开始追加 我们这里是a\nlet a = [1,2,3,4]\nlet b = a.splice(0,1,5) // a = [5,2,3,4]   b = [1]\nlet b = a.splice(1,2,5,6) // a = [1,5,6,4]   b = [2,3]\n")])])]),e("h2",{attrs:{id:"_7-0-reverse"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-0-reverse"}},[a._v("#")]),a._v(" 7.0 reverse")]),a._v(" "),e("p",[a._v("reverse 方法 颠倒数组中元素的顺序")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let a = [1,2,3]\nlet b = a.reverse(); // a = [3,2,1] b = [3,2,1]\n")])])]),e("h2",{attrs:{id:"_8-0-sort"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-0-sort"}},[a._v("#")]),a._v(" 8.0 sort")]),a._v(" "),e("p",[a._v("sort 对数组进行排序")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("8.1 基础排序是 从第一位开始的排完之后才排第二个\nlet a = [1,3,12,21]\nlet b = a.sort(); // a = [1,12,21,3] b = [1,12,21,3] \n\n8.2 排序函数\nlet a = [1,3,12,21]\nlet c = a.sort(function(a,b){\nreturn a - b; // 从小到大排序 a = [1,3,12,21] c = [1,3,12,21]\nreturn b - a; // 从大到小  a = [21,12,3,1] c = [21,12,3,1]\n}); \n")])])]),e("h2",{attrs:{id:"_9-0-join"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-0-join"}},[a._v("#")]),a._v(" 9.0 join")]),a._v(" "),e("p",[a._v("join 方法 可以把数组转换成字符串")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let a = [1,2,3]\nlet b = a.join(); // a = [1,2,3] b = '1,2,3'\nlet b = a.join('+'); // a = [1,2,3] b = 1+2+3\nlet b = a.join(''); // a = [1,2,3] b = '123'\n")])])]),e("h2",{attrs:{id:"_10-0-concat"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-0-concat"}},[a._v("#")]),a._v(" 10.0 concat")]),a._v(" "),e("p",[a._v("concat 方法属于字符串的方法，也可以用于数组拼接")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let a = [1,2,3]\nlet b = a.concat(4,5,6); // a = [1,2,3] b = [1,2,3,4,5,6]\n\nlet a = [1,2,3]\nlet b = a.concat([4,5,6]); // a = [1,2,3] b = [1,2,3,4,5,6]\n\nlet a = [1,2,3]\nlet b = a.concat([4,5,6],[7]); // a = [1,2,3] b = [1,2,3,4,5,6,7]\n")])])]),e("h2",{attrs:{id:"_11-0-indexof"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-0-indexof"}},[a._v("#")]),a._v(" 11.0 indexOf()")]),a._v(" "),e("p",[a._v("indexOf() 也是字符串的方法,也可以用于数组查找")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("11.1 传一个参数的话，存在 就返回索引值 ，不存在就返回-1\nlet a = [1,2,3]\nlet b = a.indexOf(2); // a = [1,2,3] b = 1 \n\n11.2 第二个参数也在的话，就是从第二个下标开始查询\nlet a = [1,2,3]\nlet b = a.indexOf(2,2); // a = [1,2,3] b = -1\nlet b = a.indexOf(2,1); // a = [1,2,3] b = 1\n")])])]),e("h2",{attrs:{id:"_12-0-foreach"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_12-0-foreach"}},[a._v("#")]),a._v(" 12.0 forEach()")]),a._v(" "),e("p",[a._v("forEach遍历数组,没有返回值或者说是返回值为undefined")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let arr = [1,2,3]\narr.forEach((item,index,arr)=>{\n    //item 为当前数组元素\n    // index 为当前索引\n    // arr 为本数组\n})\n")])])]),e("h2",{attrs:{id:"_13-0-map"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_13-0-map"}},[a._v("#")]),a._v(" 13.0 map()")]),a._v(" "),e("p",[a._v("map() 遍历数组 用来接收一个返回值，创建一个新数组 ，不改变原数组")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let a = [1,2,3]\nlet b = a.map((item,index,arr)=>{\nreturn item*2;\n})\n// a = [1,2,3] b=[2,4,6]\n")])])]),e("h2",{attrs:{id:"_14-0-filter"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_14-0-filter"}},[a._v("#")]),a._v(" 14.0 filter()")]),a._v(" "),e("p",[a._v("filter() 遍历数组用来接收一个返回值，创建一个新数组 ，不改变原数组")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let arr = [1,2,3,4]\nlet arr1 = arr.filter(function(item,index){\nreturn item>=3\n})\n// arr = [1,2,3,4] arr1=[3,4]\n")])])]),e("h2",{attrs:{id:"_15-0-some"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_15-0-some"}},[a._v("#")]),a._v(" 15.0 some()")]),a._v(" "),e("p",[a._v("some() 检测数组中是否含有某一个值，返回一个布尔值，如果数组中有任意一个元素满足给定的条件，结果就为 true否则则为false。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let arr = [1,2,3,4]\nlet arr1 = arr.some(function(item,index){\nreturn item>=3\n})\n// arr = [1,2,3,4] arr1=true\n")])])]),e("h2",{attrs:{id:"_16-0-every"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_16-0-every"}},[a._v("#")]),a._v(" 16.0 every()")]),a._v(" "),e("p",[a._v("every() 方法用于检测数组所有元素是否都符合指定条件（通过函数提供）,返回一个布尔值,结果为 true或false。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let arr = [1,2,3,4]\nlet arr1 = arr.every(function(item,index){\nreturn item>=3\n})\n// arr = [1,2,3,4] arr1=false\n")])])]),e("h2",{attrs:{id:"_17-0-reduce"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_17-0-reduce"}},[a._v("#")]),a._v(" 17.0 reduce()")]),a._v(" "),e("p",[a._v("reduce() 对数组中的所有元素调用指定的回调函数，该回调函数的返回值为累计结果。并且把返回值在下一次回调函数时作为参数提供。")]),a._v(" "),e("blockquote",[e("p",[a._v("语法: array.reduce(function(total, currentValue, currentIndex, item), initialValue)")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(" let arr = [1,2,3,4]\nlet arr1 = arr.reduce(function(total,num){\n\treturn total + num ;\n})\n注意： 如果不传 initialValue 则数组的第一位会成为 total 也就是说\nreduc 是从第二位开始 遍历的\n// arr = [1,2,3,4] arr1=10\n\n练习：\nvar arr1 = [1, 2, [3, 4]];  \narr1.reduce((acc, val) => acc.concat(val), []);\nacc就是 total \n[] 就是 initialValue\n则acc就是[] ,所以[].concat(1)=>[1].concat(2)=>[1,2].concat([3,4]) //  [1,2,3,4]\n")])])]),e("h2",{attrs:{id:"_18-0-array-from"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_18-0-array-from"}},[a._v("#")]),a._v(" 18.0 Array.from()")]),a._v(" "),e("p",[a._v("Array.from()方法就是将一个类数组对象或者可遍历对象转换成一个真正的数组。"),e("br"),a._v("\n18.1 Array.from 返回一个真正的数组")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let a = [1,2,3]\n// 参数为数组，返回和原数组一样的数组\nlet b = Array.from(a) // a = [1, 2, 3]  b = [1, 2, 3]\nb[2] = 4 // a = [1, 2, 3]  b = [1, 2, 4]\n// 参数含空位\nlet c = Array.from([1, ,3]) // c = [1,undefined,3]\n")])])]),e("p",[a._v("18.2 将字符串转为数组")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('let  str = \'hello world!\';\nconsole.log(Array.from(str)) // ["h", "e", "l", "l", "o", " ", "w", "o", "r", "l", "d", "!"]\n')])])]),e("p",[a._v("18.3 将Set结构的数据转换为真正的数组")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let a = [1,2,3]\nlet set = new Set(arr)\nlet b = Array.from(set) // a = [1,2,3]  b = [1,2,3]\n")])])]),e("p",[a._v("18.4 Array.from还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let a = [1,2,3]\nlet set = new Set(arr)\nlet b = Array.from(set, item => item + 1) // a = [1,2,3]  b = [2,3,4]\n")])])]),e("p",[a._v("18.5Array.from可以将类数组对象，转为数组")]),a._v(" "),e("blockquote",[e("p",[a._v("那么什么是类数组对象呢？所谓类数组对象，最基本的要求就是具有length属性的对象")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let arrayLike = {\n0: 'tom',\n1: '65',\n2: '男',\n3: ['jane','john','Mary'],\n'length': 4\n}\nlet arr = Array.from(arrayLike) // arr =  ['tom','65','男',['jane','john','Mary']]\n\nlet arrayLike = {\n'name': 'tom',\n'age': '65',\n'sex': '男',\n'friends': ['jane','john','Mary'],\n'length': 4\n}\nlet arr = Array.from(arrayLike) // arr= [ undefined, undefined, undefined, undefined ]\n")])])]),e("p",[a._v("总结：要将一个类数组对象转换为一个真正的数组，必须具备以下条件："),e("br"),a._v("\n1、该类数组对象必须具有length属性，用于指定数组的长度。如果没有length属性，那么转换后的数组是一个空数组。"),e("br"),a._v("\n2、该类数组对象的属性名必须为数值型或字符串型的数字 (ps: 该类数组对象的属性名可以加引号，也可以不加引号)")]),a._v(" "),e("h2",{attrs:{id:"_19-0-array-of"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_19-0-array-of"}},[a._v("#")]),a._v(" 19.0 Array.of()")]),a._v(" "),e("p",[a._v("Array.of() 方法： 数组创建，将参数中所有值作为元素形成数组，如果参数为空，则返回一个空数组")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let a = Array.of(1,2,3) // a = [1,2,3]\nlet b = Array.of(1,'2',true) // a = [1,'2',true]\nlet c = Array.of();// c []\nlet d = Array.of(1,'',' ',undefined,,2) // 这个是要报错的 参数不能为空(也就是里面的两个,,)\n")])])]),e("h2",{attrs:{id:"_20-0-find"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_20-0-find"}},[a._v("#")]),a._v(" 20.0 find()")]),a._v(" "),e("p",[a._v("find() 方法查找数组中符合条件的元素，若有多个符合条件的元素，则返回第一个元素。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let a = Array.of(1,2,3) // a = [1,2,3]\nlet b = a.find(item => item > 2) //b = 3\n")])])]),e("h2",{attrs:{id:"_21-0-findindex"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_21-0-findindex"}},[a._v("#")]),a._v(" 21.0 findIndex()")]),a._v(" "),e("p",[a._v("findIndex() 方法查找数组中符合条件的元素，若有多个符合条件的元素，则返回第一个元素索引。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let a = Array.of(1,2,3) // a = [1,2,3]\nlet b = a.findIndex(item => item === 1) //b = 0\n")])])]),e("h2",{attrs:{id:"_22-0-includes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_22-0-includes"}},[a._v("#")]),a._v(" 22.0 includes()")]),a._v(" "),e("p",[a._v("includes()方法：检测数组中是否包含一个值")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let a = [1,2,3]\nlet b = a.includes(1) //b = true\n// 参数2：可选，搜索的起始索引，默认为0\nlet c = a.includes(1,2) //c = false\n// NaN的包含判断\nlet d = [1,NaN].includes(NaN) // true\n")])])]),e("h2",{attrs:{id:"_23-0-fill"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_23-0-fill"}},[a._v("#")]),a._v(" 23.0 fill()")]),a._v(" "),e("p",[a._v("fill()方法：将一定范围索引的数组元素内容填充为单个指定的值")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let a = [1,2,3]\n// 参数1： 用来填充的值\n// 参数2：被填充的起始索引\n// 参数3(可选)： 被填充的结束索引，默认为数组末尾\nlet b = a.fill(10,1,2) //a = [1,10,3] b = [1,10,3]\nlet b = a.fill(10,1) // a = [1,10,10] b = [1,10,10]\n")])])]),e("h2",{attrs:{id:"_24-0-flat"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_24-0-flat"}},[a._v("#")]),a._v(" 24.0 flat()")]),a._v(" "),e("p",[a._v("嵌套数组转一维 数组 (注意：兼容性很不好)")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(" console.log([1 ,[2, 3]].flat()); // [1, 2, 3]\n// 指定转换的嵌套层数\nconsole.log([1, [2, [3, [4, 5]]]].flat(2)); // [1, 2, 3, [4, 5]]\n// 不管嵌套多少层\nconsole.log([1, [2, [3, [4, 5]]]].flat(Infinity)); // [1, 2, 3, 4, 5]\n// 自动跳过空位\nconsole.log([1, [2, , 3]].flat()); // [1, 2, 3]\n\n例外的：flatMap()方法：相当于array.map().flat()\n")])])]),e("h2",{attrs:{id:"_25-0-isarray"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_25-0-isarray"}},[a._v("#")]),a._v(" 25.0 isArray()")]),a._v(" "),e("p",[a._v("isArray()使用它可以判断一个值是否为数组。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let a = [1,2,3];\nconsole.log(Array.isArray(a));  //true\nlet a = {name:'2'}\nconsole.log(Array.isArray(a));  //false\n")])])]),e("h2",{attrs:{id:"_26-0"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_26-0"}},[a._v("#")]),a._v(" 26.0 ...")]),a._v(" "),e("p",[a._v("... 扩展运算符")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let arr = [1, 2], arr1 = [...arr]; // arr = [1, 2] arr1 = [1, 2]\n// 数组含空位\nlet arr2 = [1, , 3],\narr3 = [...arr2]; // arr3 = [1, undefined, 3]\n// 合并数组\nlet a = [...[1,2], ...[3,4]] // [1,2,3,4]\n")])])]),e("p",[a._v("接下里是一些关于数组操作的代码了："),e("br")]),a._v(" "),e("h2",{attrs:{id:"_1-0-将值转换为数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-0-将值转换为数组"}},[a._v("#")]),a._v(" 1.0 将值转换为数组")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let castArray = (value) => (Array.isArray(value) ? value : [value]);\ncastArray(1); // [1]\n")])])]),e("h2",{attrs:{id:"_2-0-检查数组是否为空"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-0-检查数组是否为空"}},[a._v("#")]),a._v(" 2.0 检查数组是否为空")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(" let isEmpty = (arr) => Array.isArray(arr) && arr.length === 0;\n isEmpty([]); // true\n")])])]),e("h2",{attrs:{id:"_3-0-克隆一个数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-0-克隆一个数组"}},[a._v("#")]),a._v(" 3.0 克隆一个数组")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("const clone = (arr) => arr.slice(0);\n\n// Or\nconst clone = (arr) => [...arr];\n\n// Or\nconst clone = (arr) => Array.from(arr);\n\n// Or\nconst clone = (arr) => arr.map((x) => x);\n\n// Or\nconst clone = (arr) => JSON.parse(JSON.stringify(arr));\n\n// Or\nconst clone = (arr) => arr.concat([]);\n")])])]),e("h2",{attrs:{id:"_4-0-将字符串数组转换为数字"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-0-将字符串数组转换为数字"}},[a._v("#")]),a._v(" 4.0 将字符串数组转换为数字")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(" const toNumbers = (arr) => arr.map(Number);\n\n// Or\nconst toNumbers = (arr) => arr.map((x) => +x);\ntoNumbers(['2', '3', '4']); // [2, 3, 4]\n")])])]),e("h2",{attrs:{id:"_5-0-计算数组中某个值的出现次数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-0-计算数组中某个值的出现次数"}},[a._v("#")]),a._v(" 5.0 计算数组中某个值的出现次数")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(" const countOccurrences = (arr, val) => arr.reduce((a, v) => (v === val ? a + 1 : a), 0);\n 展开：\n function countOccurrences(arr,val){\n  return arr.reduce(function(total,item){\n        return item === val ? total + 1 : total\n   },0)\n}\n\n// Or\nconst countOccurrences = (arr, val) => arr.filter((item) => item === val).length;\n展开：\nfunction countOccurrences(arr,val){\n   let oArr =  arr.filter(function(item,index){\n        return item === val\n    })\n    return oArr.length\n}\ncountOccurrences([2, 1, 3, 3, 2, 3], 2); // 2\ncountOccurrences(['a', 'b', 'a', 'c', 'a', 'b'], 'a'); // 3\n")])])]),e("h2",{attrs:{id:"_6-0-计算数组元素的出现次数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-0-计算数组元素的出现次数"}},[a._v("#")]),a._v(" 6.0 计算数组元素的出现次数")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("const countOccurrences = (arr) => arr.reduce((prev, curr) => ((prev[curr] = ++prev[curr] || 1), prev), {});\n展开：\nvar countOccurrences = function countOccurrences(arr) {\n    return arr.reduce(function (prev, curr) {\n        prev[curr] = ++prev[curr] || 1;\n        return prev;\n    }, {});\n}; \ncountOccurrences([2, 1, 3, 3, 2, 3]); // { '1': 1, '2': 2, '3': 3 }\ncountOccurrences(['a', 'b', 'a', 'c', 'a', 'b']); // { 'a': 3, 'b': 2, 'c': 1 }\n")])])]),e("h2",{attrs:{id:"_7-0-计算数组中某个值的出现次数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-0-计算数组中某个值的出现次数"}},[a._v("#")]),a._v(" 7.0 计算数组中某个值的出现次数")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(" const countOccurrences = (arr, val) => arr.reduce((a, v) => (v === val ? a + 1 : a), 0);\n 展开：\n var countOccurrences = function countOccurrences(arr,val) {\n        return arr.reduce(function (num, item) {\n            return item === val ? num +1 : num\n        }, 0);\n    };\n   console.log(countOccurrences([2, 1, 3, 3, 2, 3], 2)) // 2\n   console.log(countOccurrences(['a', 'b', 'a', 'c', 'a', 'b'], 'a')) // 3\n")])])]),e("h2",{attrs:{id:"_8-0-清空数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-0-清空数组"}},[a._v("#")]),a._v(" 8.0 清空数组")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(" const empty = (arr) => (arr.length = 0);\n")])])]),e("h2",{attrs:{id:"_9-0-查找数组中最长字符串的长度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-0-查找数组中最长字符串的长度"}},[a._v("#")]),a._v(" 9.0 查找数组中最长字符串的长度")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(" const findLongest = (words) => Math.max(...words.map((el) => el.length));\n  展开：\n  var findLongest = function findLongest(arrWords) {\n       let OarrArrWords =  arrWords.map(el=>{\n            return el.length\n        })\n      return  Math.max(...OarrArrWords)\n    };\n  console.log(findLongest(['always', 'look', 'on', 'the', 'bright', 'side', 'of', 'life'])) // 6\n")])])]),e("h2",{attrs:{id:"_10-0-查找数组的最大项和最小项"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-0-查找数组的最大项和最小项"}},[a._v("#")]),a._v(" 10.0 查找数组的最大项和最小项")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(" const max = (arr) => Math.max(...arr);\n const min = (arr) => Math.min(...arr);\n")])])]),e("h2",{attrs:{id:"_11-0-获取数组的平均值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-0-获取数组的平均值"}},[a._v("#")]),a._v(" 11.0 获取数组的平均值")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(" const average = (arr) => arr.reduce((a, b) => a + b, 0) / arr.length;\n 展开：\n var average = function average(arr) {\n      let Onum =  arr.reduce((a,item)=>{\n           return a+item\n       },0)\n        return Onum / arr.length;\n    };\n    console.log(average([1,2,3])) // 2\n")])])]),e("h2",{attrs:{id:"_12-0-删除数组中的重复值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_12-0-删除数组中的重复值"}},[a._v("#")]),a._v(" 12.0 删除数组中的重复值")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("onst removeDuplicate = (arr) => arr.filter((i) => arr.indexOf(i) === arr.lastIndexOf(i));\n展开：\nvar removeDuplicate = function removeDuplicate(arr) {\n          return arr.filter((i)=>{\n             return arr.indexOf(i) === arr.lastIndexOf(i);// 返回正序出现的位置和倒叙出现的位置相同证明就这一个了\n          })\n        };\nconsole.log(removeDuplicate(['h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd'])) // ['h', 'e', 'w', 'r', 'd']\n")])])]),e("h2",{attrs:{id:"_13-0-从数组中删除假值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_13-0-从数组中删除假值"}},[a._v("#")]),a._v(" 13.0 从数组中删除假值")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("const removeFalsy = (arr) => arr.filter(Boolean);\nremoveFalsy([0, 'a string', '', NaN, true, 5, undefined, 'another string', false]);\n// ['a string', true, 5, 'another string']\n")])])]),e("h2",{attrs:{id:"_14-0-打乱数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_14-0-打乱数组"}},[a._v("#")]),a._v(" 14.0 打乱数组")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(" const shuffle = (arr) => arr.sort(() => 0.5 - Math.random());\n shuffle([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]); // [9, 1, 10, 6, 8, 5, 2, 3, 7, 4]\n")])])]),e("h2",{attrs:{id:"_15-0-将数组拆分为块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_15-0-将数组拆分为块"}},[a._v("#")]),a._v(" 15.0 将数组拆分为块")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(" const chunk = (arr, size) => arr.reduce((acc, e, i) => (i % size ? acc[acc.length - 1].push(e) : acc.push([e]), acc), []);\n 展开：\n let  chunk  = function chunk(arr,size){\n       arr.reduce((acc, currentValue, currentIndex)=>{ //currentValue 当前值，currentIndex，当前索引\n          currentIndex % size ? acc[acc.length - 1].push(currentValue) : acc.push([currentValue]);\n          return acc\n       },[])\n   }\n   chunk([1, 2, 3, 4, 5, 6, 7, 8], 3); // [[1, 2, 3], [4, 5, 6], [7, 8]]\n   chunk([1, 2, 3, 4, 5, 6, 7, 8], 4); // [[1, 2, 3, 4], [5, 6, 7, 8]]\n")])])]),e("h2",{attrs:{id:"_16-0-创建笛卡尔积"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_16-0-创建笛卡尔积"}},[a._v("#")]),a._v(" 16.0 创建笛卡尔积")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(" const cartesian = (...sets) => sets.reduce((acc, set) => acc.flatMap((x) => set.map((y) => [...x, y])), [[]]);\n 展开：\n function _toConsumableArray(arr) {\n    if (Array.isArray(arr)) {\n        for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n            arr2[i] = arr[i];\n        }\n        return arr2;\n    } else {\n        return Array.from(arr);\n    }\n}\n\nvar cartesian = function cartesian() {\n    var _len = arguments.length;// 参数长度\n    var sets = Array(_len);// 初始数组长度，都为空\n    for (var _key = 0; _key < _len; _key++) {\n        sets[_key] = arguments[_key]; // 赋值给sets\n    }\n    return sets.reduce(function (acc, set) {\n        return acc.flatMap(function (x) {\n            return set.map(function (y) {\n                return [].concat(_toConsumableArray(x), [y]);\n            });\n        });\n    }, [[]]);\n};\nconsole.log(cartesian([1, 2], [3, 4]))\n// [ [1, 3], [1, 4], [2, 3], [2, 4] ]\n")])])]),e("p",[a._v("不管活成什么样子，都不要把责任推给别人，一切苦乐都是自己造成的，任何一次选择，都有它对应的筹码，愿赌服输，也是一个成年人该有的品质。")])])}),[],!1,null,null,null);r.default=n.exports}}]);
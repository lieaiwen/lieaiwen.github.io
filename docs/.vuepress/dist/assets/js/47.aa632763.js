(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{79:function(n,e,t){"use strict";t.r(e);var r=t(0),u=Object(r.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"命令模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命令模式"}},[n._v("#")]),n._v(" 命令模式")]),n._v(" "),t("p",[n._v("在软件系统中，“行为请求者”与“行为实现者”通常呈现一种“紧耦合”。但在某些场合，比如要对行为进行“记录、撤销/重做、事务”等处理，这种无法抵御变化的紧耦合是不合适的。在这种情况下，如何将“行为请求者”与“行为实现者”解耦？将一组行为抽象为对象，实现二者之间的松耦合。这就是命令模式（Command Pattern）。\n"),t("br"),n._v("\n在命令的发布者和接收者之间，定义一个命令对象，命令对象暴露出一个统一的接口给\n命令发布者，而命令的发布者不用去管接收者是如何执行命令的，做到命令的发布者和接收者的“解耦”。")]),n._v(" "),t("br"),n._v("\n举一个如果页面中有3个按钮，给不同按钮添加不同功能的例子\n"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>cmd-demo</title>\n</head>\n<body>\n    <div>\n        <button id=\"btn1\">按钮1</button>\n        <button id=\"btn2\">按钮2</button>\n        <button id=\"btn3\">按钮3</button>\n    </div>\n    <script>\n        var btn1 = document.getElementById('btn1')\n        var btn2 = document.getElementById('btn2')\n        var btn3 = document.getElementById('btn3')\n\n        // 定义一个命令发布者(执行者)的类\n        class Executor {\n            setCommand(btn, command) {\n                btn.onclick = function() {\n                    command.execute()\n                }\n            }\n        }\n\n        // 定义一个命令接收者\n        class Menu {\n            refresh() {\n                console.log('刷新菜单')\n            }\n\n            addSubMenu() {\n                console.log('增加子菜单')\n            }\n        }\n\n        // 定义一个刷新菜单的命令对象的类\n        class RefreshMenu {\n            constructor(receiver) {\n                // 命令对象与接收者关联\n                this.receiver = receiver\n            }\n\n            // 暴露出统一的接口给命令发布者Executor\n            execute() {\n                this.receiver.refresh()\n            }\n        }\n\n        // 定义一个增加子菜单的命令对象的类\n        class AddSubMenu {\n            constructor(receiver) {\n                // 命令对象与接收者关联\n                this.receiver = receiver\n            }\n            // 暴露出统一的接口给命令发布者Executor\n            execute() {\n                this.receiver.addSubMenu()\n            }\n        }\n\n        var menu = new Menu()\n        var executor = new Executor()\n\n        var refreshMenu = new RefreshMenu(menu)\n        // 给按钮1添加刷新功能\n        executor.setCommand(btn1, refreshMenu)\n\n        var addSubMenu = new AddSubMenu(menu)\n        // 给按钮2添加增加子菜单功能\n        executor.setCommand(btn2, addSubMenu)\n\n        // 如果想给按钮3增加删除菜单的功能，就继续增加删除菜单的命令对象和接收者的具体删除方法，而不必修改命令对象\n    <\/script>\n</body>\n</html>\n")])])])])}),[],!1,null,null,null);e.default=u.exports}}]);
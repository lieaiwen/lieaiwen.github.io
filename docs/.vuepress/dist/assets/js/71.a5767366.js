(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{285:function(t,n,e){"use strict";e.r(n);var s=e(6),i=Object(s.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"状态模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#状态模式"}},[t._v("#")]),t._v(" 状态模式")]),t._v(" "),e("p",[t._v("状态模式：状态模式允许一个对象在其内部状态改变的时候改变行为。这个对象看上去\n像是改变了它的类一样。状态模式把所研究的对象的行为包装在不同的状态对象里，每一个\n状态对象都属于一个抽象状态类的一个子类。状态模式的意图是让一个对象在其内部状态改变的时候，\n其行为也随之改变。状态模式需要对每一个系统可能取得的状态创立一个状态类的子类。当系统的\n状态变化时，系统便改变所选的子类。\n"),e("br"),t._v("\n举一个关于开关控制电灯的例子，电灯只有一个开关，第一次按下打开弱光，\n第二次按下打开强光，第三次按下关闭。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <title>state-demo</title>\n</head>\n\n<body>\n    <button id=\"btn\">开关</button>\n    <script>\n        // 定义一个关闭状态的类   \n        class OffLightState {\n            constructor(light) {\n                this.light = light\n            }\n            // 每个类都需要这个方法，在不同状态下按都需要触发这个方法\n            pressBtn() {\n                this.light.setState(this.light.weekLightState)\n                console.log('开启弱光')\n            }\n        }\n\n        // 定义一个弱光状态的类   \n        class WeekLightState {\n            constructor(light) {\n                this.light = light\n            }\n            pressBtn() {\n                this.light.setState(this.light.strongLightState)\n                console.log('开启强光')\n            }\n        }\n\n        // 定义一个强光状态的类\n        class StrongLightState {\n            constructor(light) {\n                this.light = light\n            }\n            pressBtn() {\n                this.light.setState(this.light.offLightState)\n                console.log('关闭电灯')\n            }\n        }\n\n        class Light {\n            constructor() {\n                this.offLightState = new OffLightState(this)\n                this.weekLightState = new WeekLightState(this)\n                this.strongLightState = new StrongLightState(this)\n                this.currentState = null\n            }\n            setState(newState) {\n                this.currentState = newState\n            }\n            init() {\n                this.currentState = this.offLightState\n            }\n        }\n\n        let light = new Light()\n        light.init()\n        var btn = document.getElementById('btn')\n        btn.onclick = function() {\n            light.currentState.pressBtn()\n        }\n    <\/script>\n</body>\n\n</html>\n")])])]),e("p",[t._v("如果这时候需要增加一个超强光，则只需增加一个超强光的类，并添加pressBtn方法，改变强光状态下，点击开关需要把状态更改为超强光，超强光状态下，点击开关把状态改为关闭即可，其他代码都不需要改动。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class StrongLightState {\n    constructor(light) {\n        this.light = light\n    }\n    pressBtn() {\n        this.light.setState(this.light.superLightState)\n        console.log('开启超强光')\n    }\n}\n\nclass SuperLightState {\n    constructor(light) {\n        this.light = light\n    }\n    pressBtn() {\n        this.light.setState(this.light.offLightState)\n        console.log('关闭电灯')\n    }\n}\n\nclass Light {\n    constructor() {\n        this.offLightState = new OffLightState(this)\n        this.weekLightState = new WeekLightState(this)\n        this.strongLightState = new StrongLightState(this)\n        this.superLightState = new SuperLightState(this)\n        this.currentState = null\n    }\n    setState(newState) {\n        this.currentState = newState\n    }\n    init() {\n        this.currentState = this.offLightState\n    }\n}\n")])])]),e("p",[t._v("小结：\n1.0 通过定义不同的状态类，根据状态的改变而改变对象的行为,而\n不必把大量的逻辑写在被操作对象的类里面，而且容易增加新的状态\n"),e("br"),t._v("\n2.0 符合开放封闭原则")])])}),[],!1,null,null,null);n.default=i.exports}}]);
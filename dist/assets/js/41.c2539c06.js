(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{87:function(t,e,o){"use strict";o.r(e);var a=o(0),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h2",{attrs:{id:"原型模式"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#原型模式"}},[t._v("#")]),t._v(" 原型模式")]),t._v(" "),o("p",[t._v("用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象"),o("br"),t._v("\n在js中，实现原型模式是在es5中，提出的--Object.create--方法，\n使用现有的对象来提新创建的对象的__proto__;"),o("br"),t._v("\n··················")]),t._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[t._v("var prototype = {\n    name: 'Jack',\n    getName: function() {\n        return this.name\n    }\n}\n\nvar obj = Object.create(prototype, {\n    job: {\n        value: 'IT'\n    }\n})\n\nconsole.log(obj.getName())  // Jack\nconsole.log(obj.job)  // IT\nconsole.log(obj.__proto__ === prototype)  //true\n")])])]),o("p",[t._v("重要 1. 方法继承")]),t._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[t._v("var Parent = function() {}\nParent.prototype.show = function() {}\nvar Child = function() {}\n\n// Child继承Parent的所有原型方法\nChild.prototype = new Parent()\n")])])]),o("ol",{attrs:{start:"2"}},[o("li",[t._v("所有函数默认继承Object")])]),t._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[t._v("var Foo = function() {}\nconsole.log(Foo.prototype.__proto__ === Object.prototype) // true\n")])])]),o("ol",{attrs:{start:"3"}},[o("li",[t._v("Object.create")])]),t._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[t._v("var proto = {a: 1}\nvar propertiesObject = {\n    b: {\n        value: 2\n    }\n}\nvar obj = Object.create(proto, propertiesObject)\nconsole.log(obj.__proto__ === proto)  // true\n")])])]),o("ol",{attrs:{start:"4"}},[o("li",[t._v("isPrototypeOf "),o("br"),t._v("\nprototypeObj是否在obj的原型链上")])]),t._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[t._v("prototypeObj.isPrototypeOf(obj)\n")])])]),o("ol",{attrs:{start:"5"}},[o("li",[t._v("instanceof"),o("br"),t._v("\nconstructor.prototype是否出现在obj的原型链上")])]),t._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[t._v("obj instanceof constructor\n")])])]),o("ol",{attrs:{start:"6"}},[o("li",[t._v("getPrototypeOf"),o("br"),t._v("\nObject.getPrototypeOf(obj) 方法返回指定对象obj的原型（内部[[Prototype]]属性的值）")])]),t._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[t._v("Object.getPrototypeOf(obj)\n")])])]),o("ol",{attrs:{start:"7"}},[o("li",[t._v("setPrototypeOf"),o("br"),t._v("\n设置一个指定的对象的原型 ( 即, 内部[[Prototype]]属性）到另一个对象或 null")])]),t._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[t._v("var obj = {}\nvar prototypeObj = {}\nObject.setPrototypeOf(obj, prototypeObj)\nconsole.log(obj.__proto__ === prototypeObj)  // true\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);
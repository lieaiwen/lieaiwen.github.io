(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{299:function(t,s,a){"use strict";a.r(s);var e=a(6),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"sleep休眠或等待函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sleep休眠或等待函数"}},[t._v("#")]),t._v(" sleep休眠或等待函数")]),t._v(" "),a("h2",{attrs:{id:"sleep函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sleep函数"}},[t._v("#")]),t._v(" sleep函数")]),t._v(" "),a("p",[t._v("JavaScript是单线程运行的，没有内置的sleep函数，现在模拟实现sleep延迟执行的效果。"),a("br"),t._v("\n使用休眠函数实现页面改变背景颜色，黑色2秒，蓝色3秒，黄色4秒，循环改变颜色。")]),t._v(" "),a("h2",{attrs:{id:"_1-0-settimeout实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-0-settimeout实现"}},[t._v("#")]),t._v(" 1.0 setTimeOut实现")]),t._v(" "),a("p",[t._v("直接使用setTimeout实现sleep()的方法，兼容性最好，但是使用了回调函数的实现方式，代码的可读性和维护性不是很好。"),a("br"),t._v("\n废话少说直接上代码，我们来看")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var bg = document.getElementsByTagName('body')[0]\n\nfunction changeColor(color) {\n\tbg.style.backgroundColor=color\n}\n\nfunction sleepHandle(){\n\tchangeColor('black');\n\tsetTimeout(()=>{\n\t\tchangeColor('blue');\n\t\tsetTimeout(()=>{\n\t\t\tchangeColor('yellow');\n\t\t\tsetTimeout(()=>{\n\t\t\t\tsleepHandle()\n\t\t\t},4000)\n\t\t},3000)\n\t},2000)\n}\nsleepHandle()\n")])])]),a("p",[t._v("是不是很简单，这可读性和可维护性也不差呀，怎么就不友好了，那是因为我们做的简单，假设改变颜色需要10种呢，一下就能感受出来了，当然了\n可能自己写的没问题，但是你让其他同事看这代码，估计是想揍人的啦。")]),t._v(" "),a("h2",{attrs:{id:"_2-0-使用promise实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-0-使用promise实现"}},[t._v("#")]),t._v(" 2.0 使用promise实现")]),t._v(" "),a("p",[t._v("在ES6的语法中，Promise是sleep方法异步的实现一种方式，借助Promise方法可以优雅的构建sleep实现方法，避免了出现函数回调‘地狱’。"),a("br")]),t._v(" "),a("blockquote",[a("p",[t._v("使用Promise，把下一次的颜色改变写在then里面，最后同样使用递归完成循环。\n使用promise代替setTimeout，利用链式调用以及then来实现颜色的转换，then返回一个promise对象，当这个对象为resolve状态then可以持续调用。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var bg = document.getElementsByTagName('body')[0]\n\nfunction changeColor(color,time) {\n\treturn new Promise((resolve,reject)=>{\n\t\tbg.style.backgroundColor=color\n\t\tsetTimeout(()=>{\n\t\t\tresolve()\n\t\t},time)\n\t})\n}\n\nfunction main(){\n\tPromise.resolve().then(()=>{\n\t\treturn changeColor('black',2000)\n\t}).then(()=>{\n\t\treturn changeColor('blue',3000)\n\t}).then(()=>{\n\t\treturn changeColor('yellow',4000)\n\t}).then(()=>{\n\t\tmain()\n\t})\n}\nmain()\n")])])]),a("p",[t._v("你看看,你看看是不是清晰很多了，等等似乎也不是那么清晰了，好多.then.then的，不要慌我们继续往下看")]),t._v(" "),a("h2",{attrs:{id:"_3-0-使用promise和await实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-0-使用promise和await实现"}},[t._v("#")]),t._v(" 3.0 使用promise和await实现")]),t._v(" "),a("p",[t._v("async await实际上是generator和promise的语法糖，在提供同步编程方式实现异步调用的基础上，同时满足对sleep函数语义化的支持，也是常用的sleep的实现方式。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var bg = document.getElementsByTagName('body')[0]\n\n function changeColor(color, time) {\n\treturn new Promise((resolve,reject)=>{\n\t\tbg.style.backgroundColor=color\n\t\tsetTimeout(()=>{\n\t\t\tresolve()\n\t\t},time)\n\t})\n}\n\nasync function main() {\n\tawait changeColor('black', 2000);\n\tconsole.log(2)\n\tawait changeColor('blue', 3000);\n\tconsole.log(3)\n\tawait changeColor('yellow', 4000);\n\tconsole.log(4)\n\tmain()\n}\nmain() \n")])])]),a("p",[t._v("2s后输出2 3s后输出3 4s后输出4 然后继续循环往复的进行。"),a("br"),t._v("\n这样逻辑和功能就分开，是不是更清晰了一点了。所以以后再有需要写等一会儿再执行的情况，我们这个方法完全可以胜任的。")]),t._v(" "),a("h2",{attrs:{id:"_4-0-while实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-0-while实现"}},[t._v("#")]),t._v(" 4.0 while实现")]),t._v(" "),a("p",[t._v("while的语法我们都知道，当满足某些条件的时候，while里面的内容会一直执行，所以如下面只有当超过500毫秒才能执行后面的逻辑")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" let sleep = (delay = 500) => {\n    let t = Date.now();\n    while(Date.now() - t <= delay) {\n        continue;\n    }\n    doSomeThing\n};\n")])])]),a("p",[t._v("我们就叫上面的代码为阻塞主进程之休眠。"),a("br")]),t._v(" "),a("p",[t._v("通宵复习是因为平时没听过课，拼命减肥是因为吃零食从来不会控制，分手了才开始后悔是因为之前没有给足够的关心。于是别人开始敬佩你的勤奋，同情你的遭遇，可是只有你知道，你的痛苦都是罪有应得。")]),t._v(" "),a("h2",{attrs:{id:"除了使用-useragent-之外，也可以使用以下方法来判断当前浏览器是在-pc-端还是移动端："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#除了使用-useragent-之外，也可以使用以下方法来判断当前浏览器是在-pc-端还是移动端："}},[t._v("#")]),t._v(" 除了使用 "),a("code",[t._v("userAgent")]),t._v(" 之外，也可以使用以下方法来判断当前浏览器是在 PC 端还是移动端：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("使用媒体查询判断屏幕大小。移动设备的屏幕一般比较小，可以通过屏幕大小来推断是否是移动端。"),a("code",[t._v("window.matchMedia")])])]),t._v(" "),a("li",[a("p",[t._v("判断终端设备的触摸能力。通过判断设备是否支持触摸操作，通常可以分辨是移动端还是 PC 端。例如，使用 "),a("code",[t._v("ontouchstart")]),t._v(" 事件来判断是否支持触摸。")])]),t._v(" "),a("li",[a("p",[t._v("判断浏览器是否支持某些 API。例如，Mobile Safari 支持 "),a("code",[t._v("touch")]),t._v(" 事件和 "),a("code",[t._v("orientationchange")]),t._v(" 事件，可以通过检测这些事件是否被支持来判断是否是移动端。")])])]),t._v(" "),a("p",[t._v("需要注意的是，这些方法都不是百分百准确的，有时候可能会出现误判的情况。因此，在判断时应尽可能结合多个因素来进行推断。")]),t._v(" "),a("h2",{attrs:{id:"ios和安卓的兼容问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ios和安卓的兼容问题"}},[t._v("#")]),t._v(" ios和安卓的兼容问题")]),t._v(" "),a("p",[t._v("1.0 获取时间戳")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  ios 不识别 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("‘"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("26")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("52")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("00")]),t._v("’"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTime")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    需要修改成 2020/11/26 11:52:00")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" time "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2020/11/26 11:52:00'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n time "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\-/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" date "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTime")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("2.0 window.open（）IOS环境下无法正常执行")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用")]),t._v("\nwindow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("location"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("href\n")])])]),a("p",[t._v("3.0 input输入框type类型为number的时候出现上下箭头")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 写样式隐藏掉")]),t._v("\n\ninput"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("webkit"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("outer"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("spin"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("button"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" input"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("webkit"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("inner"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("spin"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("button "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("webkit"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("appearance"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" none "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("important"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" margin"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("4.0 部分安卓手机点击图片会放大")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这种方法会取消掉img标签的点击事件，如果需要点击事件，在外层盒子上添加点击事件")]),t._v("\nimg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    pointer"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("events"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" none"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n")])])]),a("p",[t._v("5.0 ios滑动卡顿问题")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("webkit"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("overflow"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("scrolling"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" touch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("...等等")])])}),[],!1,null,null,null);s.default=n.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{118:function(t,n,e){"use strict";e.r(n);var a=e(0),s=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"js-全局"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js-全局"}},[t._v("#")]),t._v(" js 全局")]),t._v(" "),e("p",[t._v("js 全局属性和方法 可用于创建js对象 "),e("br"),t._v("\njs 全局属性")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1.0 NaN 指示某个值是不是数字值\n2.0 undefined 指示未定义的值 \n3.0 Infinity 代表正的无穷大的数值。\nvar x=1.7976931348623157E+10308;\n x // Infinity\n\nvar y=-1.7976931348623157E+10308;\ny // -Infinity\n\n")])])]),e("p",[t._v("js 全局函数")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('1.0 encodeURI()\t把字符串编码为 URI。\n2.0 decodeURI()\t解码某个编码的 URI。\n3.0 encodeURIComponent()\t把字符串编码为 URI 组件。\n4.0 decodeURIComponent()\t解码一个编码的 URI 组件。\n5.0 escape()\t对字符串进行编码。\n6.0 unescape()\t对由 escape() 编码的字符串进行解码。\n7.0 eval()\t计算 JavaScript 字符串，并把它作为脚本代码来执行。(不建议使用，我现在也没使用)\n8.0 isFinite() 函数用于检查其参数是否是无穷大。\n\t提示： 如果 number 是 NaN（非数字），或者是正、负无穷大的数，则返回 false。\n\n\tisFinite(123) // true\n\tisFinite(-1.23) // true\n\tisFinite(5-2) // true\n\tisFinite(0) // true\n\tisFinite("Hello") // false\n\tisFinite("2005/12/12") // false\n9.0 isNaN() 函数用于检查其参数是否是非数字值。\n\t如果参数值为 NaN 或字符串、对象、undefined等非数字值则返回 true, 否则返回 false。\n\n\tisFinite(123) // false\n\tisFinite(-1.23) // false\n\tisFinite(5-2) // false\n\tisFinite(0) // false\n\tisFinite("Hello") // true\n\tisFinite("2005/12/12") // true\n\n10.0 Number() 函数把对象的值转换为数字。\n\t如果对象的值无法转换为数字，那么 Number() 函数返回 NaN。\n\t语法： Number(object)\n\tobject\t可选。一个 JavaScript 对象。如果没有提供参数，则返回0。\n\tvar a = Number() // 0\n\n\t注意：如果参数是 Date 对象，Number() 返回从 1970 年 1 月 1 日至今的毫秒数。\n\n\tvar test1= new Boolean(true);\n\tvar test2= new Boolean(false);\n\tvar test3= new Date();\n\tvar test4= new String("999");\n\tvar test5= new String("999 888");\n\tNumber(test1) // 1\n\tNumber(test2) // 0\n\tNumber(test3) // 1580629153603\n\tNumber(test4) // 999\n\tNumber(test5) // NaN\n\n11.0 parseFloat() 函数可解析一个字符串，并返回一个浮点数。\n\n该函数指定字符串中的首个字符是否是数字。如果是，则对字符串进行解析，直到到达数字的末端为止，然后以数字返回该数字，而不是作为字符串。\n\t注意： 字符串中只返回第一个数字。\n\n\t注意： 开头和结尾的空格是允许的。\n\n\t注意： 如果字符串的第一个字符不能被转换为数字，那么 parseFloat() 会返回 NaN。\n\tparseFloat("10") // 10\n\tparseFloat("10.33") // 10.33\n\tparseFloat("34 45 66") // 34\n\tparseFloat(" 60 ") // 60\n\tparseFloat("40 years") // 40\n\tparseFloat("He was 40") // NaN\n\n12.0 parseInt() 函数可解析一个字符串，并返回一个整数。\n\t当参数 radix 的值为 0，或没有设置该参数时，parseInt() 会根据 string 来判断数字的基数。\n\n\t语法： parseInt(string, radix)\n\tstring\t必需。要被解析的字符串。\n\tradix\t可选。表示要解析的数字的基数。该值介于 2 ~ 36 之间。\n\t当忽略参数 radix , JavaScript 默认数字的基数如下:\n\n\t如果 string 以 "0x" 开头，parseInt() 会把 string 的其余部分解析为十六进制的整数。\n\t如果 string 以 0 开头，那么 ECMAScript v3 允许 parseInt() 的一个实现把其后的字符解析为八进制或十六进制的数字。\n\t如果 string 以 1 ~ 9 的数字开头，parseInt() 将把它解析为十进制的整数。\n\n\t注意：在字符串以"0"为开始时旧的浏览器默认使用八进制基数。ECMAScript 5，默认的是十进制的基数。\n\t注意： 只有字符串中的第一个数字会被返回。\n\n\t注意： 开头和结尾的空格是允许的。\n\n\t注意：如果字符串的第一个字符不能被转换为数字，那么 parseInt() 会返回 NaN。\n\n\tparseInt("10") // 10\n\tparseInt("10.33") // 10\n\tparseInt("34 45 66") // 34\n\tparseInt(" 60 ") // 60\n\tparseInt("40 years") // 40\n\tparseInt("He was 40") //NaN\n\n\tparseInt("10",10) // 10\n\tparseInt("010") // 10\n\tparseInt("10",8) // 8\n\tparseInt("0x10") //16 \n\tparseInt("10",16) // 16\n\n13.0 String 把对象的值转换为字符串\n\t注意： String() 函数返回与字符串对象的toString()方法值一样。\n\tvar test1 = new Boolean(1);\n\tvar test2 = new Boolean(0);\n\tvar test3 = new Boolean(true);\n\tvar test4 = new Boolean(false);\n\tvar test5 = new Date();\n\tvar test6 = new String("999 888");\n\tvar test7 = 12345;\n\tString(test1) // true\n\tString(test2) // false\n\tString(test3) // true\n\tString(test4) // false\n\tString(test5) // Sun Feb 02 2020 17:08:43 GMT+0800 (中国标准时间)\n\tString(test6) // 999 888\n\tString(test7) // 12345\n')])])])])}),[],!1,null,null,null);n.default=s.exports}}]);
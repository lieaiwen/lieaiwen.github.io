(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{76:function(t,n,e){"use strict";e.r(n);var s=e(0),o=Object(s.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"js-2面试题-基础知识点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js-2面试题-基础知识点"}},[t._v("#")]),t._v(" js-2面试题+基础知识点")]),t._v(" "),e("h2",{attrs:{id:"_1-0-获取元素的最终background-color"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-0-获取元素的最终background-color"}},[t._v("#")]),t._v(" 1.0 获取元素的最终background-color")]),t._v(" "),e("h2",{attrs:{id:"_2-0-原型和原型链"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-0-原型和原型链"}},[t._v("#")]),t._v(" 2.0 原型和原型链")]),t._v(" "),e("p",[t._v("2.1 原型 "),e("br"),t._v("\n每一个函数创建的时候，都会给函数设置一个prototype（原型）属性，\n这个属性是一个指针对象，对象包含所有共享的属性和方法，\n默认情况都会为prototype对象天津一个constructor属性，指向该函数")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function Person(){}\n\nPerson.prototype \n    {constructor: ƒ}\n        constructor: ƒ Person()\n        __proto__: Object\n\nPerson.prototype.constructor = Person;\n")])])]),e("p",[t._v("2.2 原型链"),e("br"),t._v("\n对象具有属性__proto__，可称为隐式原型，一个对象的隐式原型指向构造该对象的构造函数的原型，\n这也保证了实例能够访问在构造函数原型中定义的属性和方法"),e("br"),t._v("\n每个对象（obj）都有一个__proto__属性,当你调用obj对象的某个属性的时候\n自身没有他就会找obj.__proto__有木有这个属性 有的话就使用，没得话话\n继续找obj."),e("strong",[t._v("proto")]),t._v(".__proto__直到找到为止 或者到顶层 Object\nObject.prototype."),e("strong",[t._v("proto")]),t._v(",为null。\n"),e("br"),t._v("\n这种由 "),e("strong",[t._v("proto")]),t._v(" 组成的链子就是原型链 "),e("br"),t._v("\n参考这个图： "),e("br"),t._v(" "),e("img",{attrs:{src:"/images/proto.jpg",alt:"avatar"}})]),t._v(" "),e("h2",{attrs:{id:"_3-0-js-数据类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-0-js-数据类型"}},[t._v("#")]),t._v(" 3.0 js 数据类型")]),t._v(" "),e("p",[t._v("6种数据类型")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1.0 string \n2.0 number \n3.0 boolean\n4.0 undefined\n5.0 null\n6.0 object\n")])])]),e("p",[t._v("基本数据类型")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("string number null boolean number\n")])])]),e("p",[t._v("引用数据类型")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("object array function\n\n二者区别\n1.0 基本数据类型就是简单的操作值\n2.0 引用数据类型就是把引用地址赋值给变量\n")])])]),e("h2",{attrs:{id:"_4-0-栈内存和堆内存的定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-0-栈内存和堆内存的定义"}},[t._v("#")]),t._v(" 4.0 栈内存和堆内存的定义")]),t._v(" "),e("p",[t._v("4.1 函数执行的时候首先会开辟一个新的内存空间叫栈内存（环境或作用域）")]),t._v(" "),e("p",[t._v("4.2 数据类型在赋值的时候会开辟一个新的内存空间叫堆内存（存放代码块）")]),t._v(" "),e("h2",{attrs:{id:"_5-0-object-create"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-0-object-create"}},[t._v("#")]),t._v(" 5.0 Object.create()")]),t._v(" "),e("p",[t._v("Object.create()方法创建一个新对象，使用现有的对象来提供新创建的对象的__proto__。\n"),e("br"),t._v("\n语法：Object.create(proto[, propertiesObject])")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('demo1\nconst person = {\n  isHuman: false,\n  printIntroduction: function () {\n    console.log(`My name is ${this.name}. Am I human? ${this.isHuman}`);\n  }\n};\n\nconst me = Object.create(person);\n\nme.name = "Matthew"; // "name" is a property set on "me", but not on "person"\nme.isHuman = true; // inherited properties can be overwritten\n\nme.printIntroduction();\n// expected output: "My name is Matthew. Am I human? true"\n\nconsole.log(me) //\n   name: "Matthew"\n   isHuman: true\n    __proto__:\n        isHuman: false\n        printIntroduction: ƒ ()\n        __proto__: Object\n\ndemo2\nvar prototype = {\n    name: \'Jack\',\n    getName: function() {\n        return this.name\n    }\n}\n\nvar obj = Object.create(prototype, {\n    job: {\n        value: \'IT\'\n    }\n})\n\nconsole.log(obj.getName())  // Jack\nconsole.log(obj.job)  // IT\nconsole.log(obj.__proto__ === prototype)  //true\nconsole.log(obj) \n    job: "IT"\n    __proto__:\n        name: "Jack"\n        getName: ƒ ()\n        __proto__: Object\n\n')])])]),e("h2",{attrs:{id:"_6-0-浏览器存储的方式有哪些"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-0-浏览器存储的方式有哪些"}},[t._v("#")]),t._v(" 6.0 浏览器存储的方式有哪些")]),t._v(" "),e("p",[e("img",{attrs:{src:"/images/js/js-localstorage.jpg",alt:"avatar"}}),t._v(" "),e("br"),t._v("\nIndexedDB是一个文档数据库，它在完全内置于浏览器中的一个沙盒环境中（强制依照（浏览器）同源策略）。\n"),e("br"),t._v("区别： "),e("br"),t._v("\n1.0 生命周期的不同 "),e("br"),t._v("\n2.0 数据量的大小不同"),e("br"),t._v("\n3.0 cookie 主要是跟服务器通信的"),e("br")]),t._v(" "),e("p",[t._v("localStorage 只能存字符串，存取 JSON 数据需配合 JSON.stringify() 和 JSON.parse()")]),t._v(" "),e("h2",{attrs:{id:"_7-0-cookie-和session-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-0-cookie-和session-的区别"}},[t._v("#")]),t._v(" 7.0 cookie 和session 的区别")]),t._v(" "),e("p",[t._v("cookie 机制是通过检查客户身上的“通行证”来确定客户身份的话，那么 session 机制就是通过检查服务器上的“客户明细表”来确认客户身份。session 相当于程序在服务器上建立的一份客户档案，客户来访的时候只需要查询客户档案表就可以了。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1.0 存在的位置：\n    cookie 存在于客户端;session 存在于服务器的内存中\n2.0 安全性\n    cookie 是以明文的方式存放在客户端的，安全性低，；session 存放于服务器的内存中，所以安全性好\n3.0 生命周期(以 20 分钟为例)\n    cookie 的生命周期是累计的，从创建时，就开始计时，20 分钟后 cookie 生命周期结束；\n    session 的生命周期是间隔的，从创建时，开始计时如在 20 分钟，没有访问 session，那么 session 生命周期被销毁。\n    但是，如果在 20 分钟内（如在第 19 分钟时）访问过 session，那么，将重新计算 session 的生命周期。\n    关机会造成 session 生命周期的结束，但是对 cookie 没有影响\n4.0 访问范围\n    cookie 为多个用户浏览器共享；session 为一个用户浏览器独享\n")])])]),e("h2",{attrs:{id:"_8-0-js获取程序执行的时间"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-0-js获取程序执行的时间"}},[t._v("#")]),t._v(" 8.0 js获取程序执行的时间")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("    console.time('global')\n    //要执行的代码放中间\n    console.timeEnd('global')\nglobal是标志这两个time是一对的。\n")])])])])}),[],!1,null,null,null);n.default=o.exports}}]);
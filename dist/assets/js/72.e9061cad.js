(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{289:function(n,o,t){"use strict";t.r(o);var e=t(6),r=Object(e.a)({},(function(){var n=this,o=n.$createElement,t=n._self._c||o;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"js事件循环机制-event-loop"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js事件循环机制-event-loop"}},[n._v("#")]),n._v(" js事件循环机制(Event Loop)")]),n._v(" "),t("p",[n._v("javascript从诞生之日起就是一门  "),t("code",[n._v("单线程的 非阻塞的")]),n._v("  脚本语言，\n"),t("code",[n._v("单线程")]),n._v("意味着，javascript代码在执行的任何时候，都只有一个主线程来处理所有的任务，\n"),t("code",[n._v("非阻塞")]),n._v("靠的就是 event loop（事件循环），本文就讲解下事件循环。\n"),t("br"),n._v(" "),t("strong",[n._v("event loop它最主要是分三部分：主线程、宏队列（macrotask）、微队列（microtask）")]),t("br"),n._v("\njs的任务队列分为同步任务和异步任务，所有的同步任务都是在主线程里执行的，异步任务可能会在macrotask或者microtask里面"),t("br")]),n._v(" "),t("p",[t("strong",[n._v("主线程")]),t("br"),n._v("\n就是访问到的script标签里面包含的内容，或者是直接访问某一个js文件的时候，里面的可以在当前作用域直接执行的所有内容\n"),t("br")]),n._v(" "),t("p",[t("strong",[n._v("宏队列（macrotask）")]),t("br"),n._v("\nsetTimeout、setInterval、setImmediate(Node.js 环境)、I/O、UI rendering"),t("br")]),n._v(" "),t("p",[t("strong",[n._v("微队列（microtask）")]),t("br"),n._v("\npromise.then、process.nextTick(Node.js 环境) "),t("br")]),n._v(" "),t("p",[t("strong",[n._v("执行顺序")]),t("br"),n._v("\n1、先执行主线程"),t("br")]),n._v(" "),t("p",[n._v("2、遇到宏队列（macrotask）放到宏队列（macrotask）"),t("br")]),n._v(" "),t("p",[n._v("3、遇到微队列（microtask）放到微队列（microtask）"),t("br")]),n._v(" "),t("p",[n._v("4、主线程执行完毕"),t("br")]),n._v(" "),t("p",[n._v("5、执行微队列（microtask），微队列（microtask）执行完毕"),t("br")]),n._v(" "),t("p",[n._v("6、执行一次宏队列（macrotask）中的一个任务，执行完毕"),t("br")]),n._v(" "),t("p",[n._v("7、执行微队列（microtask），执行完毕"),t("br")]),n._v(" "),t("p",[n._v("8、依次循环..."),t("br"),n._v("\n下面代码执行结果：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v(" console.log(1); // 1\n\nsetTimeout(function() { //2\n console.log(2);\n}, 0);\n\nnew Promise(function(resolve) {//3\n console.log(3);\n resolve(Date.now());\n}).then(function() {\n console.log(4);\n});\n\nconsole.log(5); //4 \n\nsetTimeout(function() { // 5\n new Promise(function(resolve) {\n  console.log(6);\n  resolve(Date.now());\n }).then(function() {\n  console.log(7);\n });\n}, 0);\n")])])]),t("p",[n._v("执行顺序")]),n._v(" "),t("blockquote",[t("p",[n._v("1.0 主线程 碰到1: 打印1 "),t("br"),n._v("\n2.0 碰到2： 打印3，把promise.then放到宏任务里面 碰到3: 放到微任务里面 碰到4: 打印5  碰到5: 放到宏任务里面 "),t("br"),n._v("\n3.0 执行微任务3： 打印4"),t("br"),n._v("\n4.0 执行宏任务2（因为先进去的）： 打印2"),t("br"),n._v("\n5.0 执行宏任务5，打印6 里面有promise.then 放到微任务 宏任务执行完毕"),t("br"),n._v("\n6.0 执行微任务：打印7"),t("br"),n._v("\n最终结果是：1 3 5 4 2 6 7")])]),n._v(" "),t("p",[n._v("我们在Promise.then实现一个稍微耗时的操作，")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("console.log(1); //1\n\nvar start = Date.now();\n\nsetTimeout(function() { // 2\n console.log(2);\n}, 0);\n\nsetTimeout(function() { //3\n console.log(4, Date.now() - start);\n}, 400);\n\nPromise.resolve().then(function() { //4\n var sum = function(a, b) {\n  return Number(a) + Number(b);\n }\n var res = [];\n for(var i=0; i<5000000; i++) {\n  var a = Math.floor(Math.random()*100);\n  var b = Math.floor(Math.random()*200);\n  res.push(sum(a, b));\n }\n res = res.sort();\n console.log(3); \n})\n")])])]),t("blockquote",[t("p",[n._v("1.0 主线程 碰到1: 打印1 "),t("br"),n._v("\n2.0 碰到2，3： 放到宏任务  碰到4：放到微任务里"),t("br"),n._v("\n3.0 执行微任务4： 打印3"),t("br"),n._v("\n4.0 执行宏任务2，3： 2  4 3986"),t("br")])]),n._v(" "),t("p",[n._v("本来要设定的是400ms后输出，但因为之前的任务耗时严重，导致之后的任务只能延迟往后排。说明，setTimeout和setInterval这种操作的延时是不准确的，这两个方法只能大概将任务400ms之后的宏任务中，但具体的执行时间，还是要看线程是否空闲。若前一个任务中有耗时的操作，或者有无限的微任务加入进来时，则会阻塞下一个任务的执行。\n"),t("br")]),n._v(" "),t("p",[t("strong",[n._v("async-await")]),t("br"),n._v("\n那么 async-await 的代码怎么执行呢")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function A() {\n  return Promise.resolve(Date.now());\n}\nasync function B() {\n  console.log(Math.random());\n  let now = await A();\n  console.log(now);\n}\nconsole.log(1);\nB();\nconsole.log(2);\n")])])]),t("p",[n._v("其实，async-await 只是 Promise+generator 的一种语法糖而已。上面的代码我们改写为这样，可以更加清晰一点：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function B() {\n  console.log(Math.random());\n  A().then(function(now) {\n    console.log(now);\n  })\n}\nconsole.log(1);\nB();\nconsole.log(2);\n")])])]),t("p",[n._v("输出结果是：1, 0.4793526730678652(随机数), 2, 1557830834679(时间戳);"),t("br")]),n._v(" "),t("h2",{attrs:{id:"其他概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他概念"}},[n._v("#")]),n._v(" 其他概念")]),n._v(" "),t("p",[t("strong",[n._v("队列（Queue）")]),t("br"),n._v("\n队列 是一种 FIFO(First In, First Out) 的数据结构，它的特点就是 先进先出")]),n._v(" "),t("blockquote",[t("p",[n._v("生活中最常见的例子就是排队啦，排在队伍最前面的人最先被提供服务。")])]),n._v(" "),t("p",[t("strong",[n._v("栈（Stack）")]),t("br"),n._v("\n栈 是一种 LIFO（Last In, First Out）的数据结构，特点即 后进先出。")]),n._v(" "),t("blockquote",[t("p",[n._v("薯片在包装的时候只能从顶部放入，而吃的时候也只能从顶部拿出，这就叫后进先出哈")])]),n._v(" "),t("p",[t("strong",[n._v("调用栈（Call Stack）")]),t("br"),n._v("\n它本质上当然还是个栈啦 废话，关键在于它里面装的东西，是一个个待执行的函数。")]),n._v(" "),t("blockquote",[t("p",[n._v("Event Loop 会一直检查 Call Stack 中是否有函数需要执行，如果有，就从栈顶依次执行。同时，如果执行的过程中发现其他函数，继续入栈然后执行。")])]),n._v(" "),t("p",[n._v("先拿两个函数来说：")]),n._v(" "),t("p",[n._v("1 栈空"),t("br"),n._v("\n2 现在执行到一个 函数A，函数A 入栈"),t("br"),n._v("\n3 函数A 又调用了 函数B，函数B 入栈"),t("br"),n._v("\n4 函数B 执行完后 出栈"),t("br"),n._v("\n5 然后继续执行 函数A，执行完后A也 出栈"),t("br"),n._v("\n6 栈空"),t("br")]),n._v(" "),t("h2",{attrs:{id:"删除数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#删除数组"}},[n._v("#")]),n._v(" 删除数组")])])}),[],!1,null,null,null);o.default=r.exports}}]);